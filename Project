package presentation;

import java.util.InputMismatchException;
import java.util.Map;
import java.util.Scanner;

import pojo.Customer;
import service.CustomerService;

public class Presentation {
    private CustomerService customerService = new CustomerService();
    private String loggedInCustomerId;
    private Scanner scan;

    public Presentation(Scanner scan) {
        this.scan = scan;
    }

    public void present() {
        try {
            while (true) {
                System.out.println("1. Admin Login");
                System.out.println("2. Customer Login");
                System.out.println("3. Customer Registration");
                System.out.println("4. Exit");

                int choice = scan.nextInt();
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        adminLogin();
                        break;
                    case 2:
                        customerLogin();
                        break;
                    case 3:
                        customerRegister();
                        break;
                    case 4:
                        System.out.println("Exiting the system.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input type. Please enter a number.");
            scan.nextLine(); // Consume the incorrect input
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void adminLogin() {
        try {
            System.out.print("Enter Admin Username: ");
            String adminUsername = scan.nextLine();
            System.out.print("Enter Admin Password: ");
            String adminPassword = scan.nextLine();

            if (adminUsername.equals("admin1") && adminPassword.equals("1234")) {
                System.out.println("Admin logged in successfully.");
                adminMenu();
            } else {
                System.out.println("Invalid admin credentials.");
            }
        } catch (Exception e) {
            System.err.println("Error during admin login: " + e.getMessage());
        }
    }

    private void adminMenu() {
        while (true) {
            try {
                System.out.println("Admin Menu:");
                System.out.println("1. Add Customer");
                System.out.println("2. View All Customers");
                System.out.println("3. Edit Customer");
                System.out.println("4. Delete Customer");
                System.out.println("5. View Pending Bills");
                System.out.println("6. Logout");

                int choice = scan.nextInt();
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addCustomer();
                        break;
                    case 2:
                        viewAllCustomers();
                        break;
                    case 3:
                        editCustomer();
                        break;
                    case 4:
                        deleteCustomer();
                        break;
                    case 5:
                        viewPendingBills();
                        break;
                    case 6:
                        System.out.println("Admin logged out.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input type. Please enter a number.");
                scan.nextLine(); // Consume the incorrect input
            } catch (Exception e) {
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void customerLogin() {
        try {
            System.out.print("Enter Customer ID: ");
            String customerId = scan.nextLine();

            Customer customer = customerService.fetchCustomer(customerId);
            if (customer != null) {
                loggedInCustomerId = customerId;
                System.out.println("Customer logged in successfully.");
                customerMenu();
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error during customer login: " + e.getMessage());
        }
    }

    private void customerRegister() {
        try {
            System.out.print("Enter new Customer ID: ");
            String customerId = scan.nextLine();
            System.out.print("Enter Customer Name: ");
            String customerName = scan.nextLine();

            Customer newCustomer = new Customer(customerId, customerName);
            customerService.addCustomer(newCustomer);
            System.out.println("Customer registered successfully.");
        } catch (Exception e) {
            System.err.println("Error during customer registration: " + e.getMessage());
        }
    }

    private void customerMenu() {
        while (true) {
            try {
                System.out.println("Customer Menu:");
                System.out.println("1. Enter Usage");
                System.out.println("2. Generate Monthly Bill");
                System.out.println("3. View Previous Bills");
                System.out.println("4. Make Payment");
                System.out.println("5. View Payment History");
                System.out.println("6. Logout");

                int choice = scan.nextInt();
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        enterUsage();
                        break;
                    case 2:
                        generateMonthlyBill();
                        break;
                    case 3:
                        viewPreviousBills();
                        break;
                    case 4:
                        makePayment();
                        break;
                    case 5:
                        viewPaymentHistory();
                        break;
                    case 6:
                        System.out.println("Customer logged out.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input type. Please enter a number.");
                scan.nextLine(); // Consume the incorrect input
            } catch (Exception e) {
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void enterUsage() {
        try {
            System.out.print("Enter month: ");
            String month = scan.nextLine();
            System.out.print("Enter usage in kWh: ");
            double usage = scan.nextDouble();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);
            if (customer != null) {
                customer.addUsage(month, usage);
                customerService.updateCustomer(customer);
                System.out.println("Usage recorded successfully.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input type. Please enter a valid usage.");
            scan.nextLine(); // Consume the incorrect input
        } catch (Exception e) {
            System.err.println("Error while recording usage: " + e.getMessage());
        }
    }

    private void generateMonthlyBill() {
        try {
            System.out.print("Enter month: ");
            String month = scan.nextLine();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);
            if (customer != null) {
                double billAmount = customer.generateBill(month);
                if (billAmount > 0) {
                    System.out.println("Bill generated for " + month + ": $" + billAmount);
                } else {
                    System.out.println("No usage found for " + month);
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while generating bill: " + e.getMessage());
        }
    }

    private void viewPreviousBills() {
        try {
            Customer customer = customerService.fetchCustomer(loggedInCustomerId);
            if (customer != null) {
                System.out.println("Previous Bills:");
                Map<String, Double> bills = customer.getPreviousBills();
                bills.forEach((month, amount) -> {
                    System.out.println("Month: " + month + ", Amount: $" + amount);
                });
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while viewing previous bills: " + e.getMessage());
        }
    }

    private void makePayment() {
        try {
            System.out.print("Enter month: ");
            String month = scan.nextLine();
            System.out.print("Enter payment amount: ");
            double payment = scan.nextDouble();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);
            if (customer != null) {
                double amountDue = customer.generateBill(month); // Assume generateBill returns the amount due
                if (payment >= amountDue) {
                    customer.makePayment(month, payment);
                    customerService.updateCustomer(customer);
                    System.out.println("Payment successful.");
                } else {
                    System.out.println("Payment is less than the amount due.");
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input type. Please enter a valid amount.");
            scan.nextLine(); // Consume the incorrect input
        } catch (Exception e) {
            System.err.println("Error while processing payment: " + e.getMessage());
        }
    }

    private void viewPaymentHistory() {
        try {
            Customer customer = customerService.fetchCustomer(loggedInCustomerId);
            if (customer != null) {
                System.out.println("Payment History:");
                Map<String, Double> payments = customer.getPaymentHistory();
                payments.forEach((month, amount) -> {
                    System.out.println("Month: " + month + ", Amount: $" + amount);
                });
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while viewing payment history: " + e.getMessage());
        }
    }

    private void addCustomer() {
        try {
            System.out.print("Enter Customer ID: ");
            String customerId = scan.nextLine();
            System.out.print("Enter Customer Name: ");
            String customerName = scan.nextLine();

            Customer customer = new Customer(customerId, customerName);
            customerService.addCustomer(customer);
            System.out.println("Customer added successfully.");
        } catch (Exception e) {
            System.err.println("Error while adding customer: " + e.getMessage());
        }
    }

    private void viewAllCustomers() {
        try {
            System.out.println("All Customers:");
            customerService.getAllCustomers().forEach(customer -> {
                System.out.println("ID: " + customer.getId() + ", Name: " + customer.getName());
            });
        } catch (Exception e) {
            System.err.println("Error while viewing customers: " + e.getMessage());
        }
    }

    private void editCustomer() {
        try {
            System.out.print("Enter Customer ID to edit: ");
            String customerId = scan.nextLine();

            Customer customer = customerService.fetchCustomer(customerId);
            if (customer != null) {
                System.out.print("Enter new Customer Name: ");
                String customerName = scan.nextLine();

                customer.setName(customerName);
                customerService.updateCustomer(customer);
                System.out.println("Customer updated successfully.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while editing customer: " + e.getMessage());
        }
    }

    private void deleteCustomer() {
        try {
            System.out.print("Enter Customer ID to delete: ");
            String customerId = scan.nextLine();

            Customer customer = customerService.fetchCustomer(customerId);
            if (customer != null) {
                customerService.deleteCustomer(customerId);
                System.out.println("Customer deleted successfully.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while deleting customer: " + e.getMessage());
        }
    }

    private void viewPendingBills() {
        try {
            System.out.print("Enter Customer ID to view pending bills: ");
            String customerId = scan.nextLine();

            Customer customer = customerService.fetchCustomer(customerId);
            if (customer != null) {
                Map<String, Double> pendingBills = customer.getPendingBills();
                if (pendingBills.isEmpty()) {
                    System.out.println("No pending bills.");
                } else {
                    System.out.println("Pending Bills:");
                    pendingBills.forEach((month, amount) -> {
                        System.out.println("Month: " + month + ", Amount: $" + amount);
                    });
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.err.println("Error while viewing pending bills: " + e.getMessage());
        }
    }
}
