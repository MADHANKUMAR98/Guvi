<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>block-trade-project</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
        <relativePath/> <!-- Lookup parent from repository -->
    </parent>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web for building web, including RESTful applications -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA for database operations -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Spring Boot Starter Test for unit testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- H2 Database for in-memory testing (useful for development) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Oracle JDBC Driver (add your version) -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.8.0.0</version>
            <scope>runtime</scope>
        </dependency>

        <!-- SpringDoc OpenAPI for Swagger documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!-- Lombok for reducing boilerplate code -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            
            <!-- Maven Compiler Plugin for Java 17 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


Below is the complete code for the Spring Boot project with EMA calculation and Swagger implementation for API documentation.

### 1. `pom.xml`

Make sure you include the necessary dependencies for Spring Boot, JPA, Oracle, and Swagger.

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>Block_Trade_Project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
    </parent>

    <dependencies>
        <!-- Spring Boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Swagger dependencies -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

### 2. `BlockTradeData.java` (Entity Class)

```java
package com.example.blocktradeproject.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "BLOCK_TRADE_DATA_ANALYSIS")
@IdClass(BlockTradeId.class)
public class BlockTradeData {

    @Id
    @Column(name = "TRADE_DATE")
    private LocalDate tradeDate;

    @Id
    @Column(name = "SYMBOL")
    private String symbol;

    @Column(name = "TRADE_PRICE")
    private double tradePrice;

    @Column(name = "PREVIOUS_EMA")
    private double previousEma;

    // Getters and setters
    // ...
}
```

### 3. `BlockTradeId.java` (Composite Key Class)

```java
package com.example.blocktradeproject.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Objects;

public class BlockTradeId implements Serializable {

    private LocalDate tradeDate;
    private String symbol;

    // Default constructor, getters, setters, equals, and hashCode
    // ...
}
```

### 4. `BlockTradeRepository.java` (Repository Interface)

```java
package com.example.blocktradeproject.repository;

import com.example.blocktradeproject.model.BlockTradeData;
import com.example.blocktradeproject.model.BlockTradeId;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;

@Repository
public interface BlockTradeRepository extends JpaRepository<BlockTradeData, BlockTradeId> {

    @Query("SELECT b FROM BlockTradeData b WHERE b.symbol = :symbol AND b.tradeDate BETWEEN :startDate AND :endDate ORDER BY b.tradeDate")
    List<BlockTradeData> findTradesForSymbolInDateRange(@Param("symbol") String symbol,
                                                        @Param("startDate") LocalDate startDate,
                                                        @Param("endDate") LocalDate endDate);
}
```

### 5. `BlockTradeService.java` (Service Layer)

```java
package com.example.blocktradeproject.service;

import com.example.blocktradeproject.model.BlockTradeData;
import com.example.blocktradeproject.repository.BlockTradeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PreDestroy;
import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.*;

@Service
public class BlockTradeService {

    @Autowired
    private BlockTradeRepository blockTradeRepository;

    private ExecutorService executor = Executors.newFixedThreadPool(10);

    public double calculateEMA(String symbol, LocalDate date) throws Exception {
        LocalDate startDate = date.minusDays(30);
        List<BlockTradeData> trades = blockTradeRepository.findTradesForSymbolInDateRange(symbol, startDate, date);

        if (trades.isEmpty()) {
            throw new Exception("No trade data found for symbol " + symbol);
        }

        double ema = trades.get(0).getPreviousEma();
        double multiplier = 2.0 / (trades.size() + 1);

        for (BlockTradeData trade : trades) {
            ema = ((trade.getTradePrice() - ema) * multiplier) + ema;
        }

        return ema;
    }

    public double getEMAAsync(String symbol, LocalDate date) throws ExecutionException, InterruptedException {
        Callable<Double> task = () -> calculateEMA(symbol, date);
        Future<Double> future = executor.submit(task);
        return future.get();
    }

    @PreDestroy
    public void shutdown() {
        executor.shutdown();
    }
}
```

### 6. `BlockTradeController.java` (Controller)

```java
package com.example.blocktradeproject.controller;

import com.example.blocktradeproject.service.BlockTradeService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.concurrent.ExecutionException;

@RestController
@RequestMapping("/api/block-trade")
public class BlockTradeController {

    @Autowired
    private BlockTradeService blockTradeService;

    @ApiOperation(value = "Get the EMA for a symbol and date")
    @GetMapping("/ema")
    public ResponseEntity<Double> getEMA(@RequestParam String symbol, @RequestParam String date) {
        try {
            LocalDate tradeDate = LocalDate.parse(date);
            double ema = blockTradeService.getEMAAsync(symbol, tradeDate);
            return ResponseEntity.ok(ema);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}
```

### 7. `SwaggerConfig.java` (Swagger Configuration)

```java
package com.example.blocktradeproject.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.example.blocktradeproject"))
                .build();
    }
}
```

### 8. `application.properties`

```properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=YOUR_DB_USERNAME
spring.datasource.password=YOUR_DB_PASSWORD
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect
server.port=8080
```

### Sample Flow Process

**API Endpoint**:
- URL: `http://localhost:8080/api/block-trade/ema?symbol=AAPL&date=2024-09-06`
- Method: `GET`

**Sample Input**:
- Symbol: `AAPL`
- Date: `2024-09-06`

**Output**:
- JSON Response: 
```json
{
    "averageEMA": 156.0
}
```

### Accessing Swagger Documentation

Once the application is running, you can access the Swagger UI at:
```
http://localhost:8080/swagger-ui/
```
This provides a visual interface for interacting with the API, making testing and understanding the endpoints straightforward.
The `@ApiOperation` annotation issue typically arises when using the newer versions of Spring Boot with Springfox, as they may not be compatible with each other. Springfox has not been updated recently to align with the latest versions of Spring Boot. 

To resolve this, we can use an alternative library like **Springdoc OpenAPI**, which is compatible with the latest versions of Spring Boot (3.x). Here's how to update the project to use Springdoc OpenAPI:

### Step 1: Update `pom.xml`

Add the following dependencies for Springdoc:

```xml
<dependencies>
    <!-- Spring Boot and JPA dependencies remain as before -->
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        <version>2.1.0</version>
    </dependency>
</dependencies>
```

### Step 2: Update the Controller

Remove the `@ApiOperation` annotation and update the controller as shown below. You don’t need special annotations for documentation; Springdoc will automatically generate the API documentation based on your controller and model.

```java
package com.example.blocktradeproject.controller;

import com.example.blocktradeproject.service.BlockTradeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.concurrent.ExecutionException;

@RestController
@RequestMapping("/api/block-trade")
public class BlockTradeController {

    @Autowired
    private BlockTradeService blockTradeService;

    @GetMapping("/ema")
    public ResponseEntity<Double> getEMA(@RequestParam String symbol, @RequestParam String date) {
        try {
            LocalDate tradeDate = LocalDate.parse(date);
            double ema = blockTradeService.getEMAAsync(symbol, tradeDate);
            return ResponseEntity.ok(ema);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}
```

### Step 3: Access the Swagger Documentation

Once you start the application, Springdoc OpenAPI will automatically generate and provide the Swagger UI documentation at:

```
http://localhost:8080/swagger-ui.html
```

You’ll see a visual interface similar to the one provided by Springfox but compatible with Spring Boot 3.x.

### Step 4: Additional Configuration (Optional)

If you want to customize your API documentation further, you can add a configuration class:

```java
package com.example.blocktradeproject.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springdoc.core.models.GroupedOpenApi;

@Configuration
public class OpenApiConfig {

    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("block-trade-api")
                .pathsToMatch("/api/block-trade/**")
                .build();
    }
}
```

This configuration helps to organize and group your APIs in the documentation.

With these updates, your project will be using the latest compatible API documentation solution, ensuring that your endpoints are properly documented without the compatibility issues of Springfox.
<dependency>
    <groupId>jakarta.servlet</groupId>
    <artifactId>jakarta.servlet-api</artifactId>
    <version>5.0.0</version> <!-- Compatible with Spring Boot 3.x -->
    <scope>provided</scope>
</dependency>








To create a full project that calculates the Exponential Moving Average (EMA) using multi-threading for efficiency and also provides a Swagger API for accessing the EMA values, you'll need to implement a comprehensive Spring Boot application. Below is an explanation of the architecture and complete code:

### Project Structure
1. **Entity Layer**: Defines the `BlockTradeData` entity representing each trade record.
2. **Repository Layer**: JPA repository for database operations.
3. **Service Layer**: Handles the business logic for calculating EMA and uses multi-threading.
4. **Controller Layer**: Exposes REST endpoints for inputting symbol and date.
5. **Swagger Configuration**: Configures Swagger for API documentation and testing.
6. **Database Schema**: SQL script to create the necessary database table.

### Database Schema
Here's the SQL to create the table:

```sql
CREATE TABLE BLOCK_TRADE_DATA_ANALYSIS (
    trade_date DATE,
    symbol VARCHAR2(50) NOT NULL,
    trade_price NUMBER(10, 2) NOT NULL,
    previous_ema NUMBER(10, 2),
    PRIMARY KEY (symbol, trade_date)
);
```

### `pom.xml`
Add the required dependencies in the `pom.xml`:

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>block-trade-project</artifactId>
    <version>1.0-SNAPSHOT</version>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
    </parent>

    <dependencies>
        <!-- Spring Boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.1.0</version>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.8.0.0</version>
        </dependency>
    </dependencies>

    <properties>
        <java.version>17</java.version>
    </properties>
</project>
```

### Entity Class (`BlockTradeData.java`)
```java
package com.example.blocktrade.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import java.io.Serializable;
import java.util.Date;

@Entity
@Table(name = "BLOCK_TRADE_DATA_ANALYSIS")
@IdClass(BlockTradeDataId.class)
public class BlockTradeData implements Serializable {

    @Id
    private Date tradeDate;

    @Id
    private String symbol;

    private double tradePrice;
    private Double previousEma;

    // Getters and setters
}
```

### Composite Key (`BlockTradeDataId.java`)
```java
package com.example.blocktrade.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

public class BlockTradeDataId implements Serializable {

    private Date tradeDate;
    private String symbol;

    // Constructors, equals, and hashCode
}
```

### Repository Interface (`BlockTradeDataRepository.java`)
```java
package com.example.blocktrade.repository;

import com.example.blocktrade.entity.BlockTradeData;
import com.example.blocktrade.entity.BlockTradeDataId;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Date;
import java.util.List;

@Repository
public interface BlockTradeDataRepository extends JpaRepository<BlockTradeData, BlockTradeDataId> {
    List<BlockTradeData> findBySymbolAndTradeDateBetween(String symbol, Date startDate, Date endDate);
}
```

### Service Class (`BlockTradeService.java`)
```java
package com.example.blocktrade.service;

import com.example.blocktrade.entity.BlockTradeData;
import com.example.blocktrade.repository.BlockTradeDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.stream.Collectors;

@Service
public class BlockTradeService {

    @Autowired
    private BlockTradeDataRepository repository;

    @Autowired
    private Executor taskExecutor;

    public double calculateEMA(String symbol, Date date) throws ExecutionException, InterruptedException {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DAY_OF_MONTH, -30);
        Date startDate = cal.getTime();

        CompletableFuture<List<BlockTradeData>> future = CompletableFuture.supplyAsync(
            () -> repository.findBySymbolAndTradeDateBetween(symbol, startDate, date), taskExecutor
        );

        List<BlockTradeData> trades = future.get();
        return calculateEMA(trades);
    }

    private double calculateEMA(List<BlockTradeData> trades) {
        if (trades.isEmpty()) return 0;

        double multiplier = 2.0 / (trades.size() + 1);
        double ema = trades.get(0).getTradePrice();

        for (BlockTradeData trade : trades.subList(1, trades.size())) {
            ema = ((trade.getTradePrice() - ema) * multiplier) + ema;
        }

        return ema;
    }
}
```

### Controller Class (`BlockTradeController.java`)
```java
package com.example.blocktrade.controller;

import com.example.blocktrade.service.BlockTradeService;
import io.swagger.v3.oas.annotations.Operation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.Date;
import java.util.concurrent.ExecutionException;

@RestController
public class BlockTradeController {

    @Autowired
    private BlockTradeService service;

    @Operation(summary = "Get EMA for a symbol and date")
    @GetMapping("/api/ema")
    public double getEMA(@RequestParam String symbol, 
                         @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date date) throws ExecutionException, InterruptedException {
        return service.calculateEMA(symbol, date);
    }
}
```

### Swagger Configuration (`OpenApiConfig.java`)
```java
package com.example.blocktrade.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI().info(new Info().title("Block Trade API").version("1.0").description("API for block trade analysis"));
    }
}
```

### Application Class (`BlockTradeProjectApplication.java`)
```java
package com.example.blocktrade;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableAsync;

@SpringBootApplication
@EnableAsync
public class BlockTradeProjectApplication {
    public static void main(String[] args) {
        SpringApplication.run(BlockTradeProjectApplication.class, args);
    }
}
```

### Thread Pool Configuration (`AsyncConfig.java`)
```java
package com.example.blocktrade.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import java.util.concurrent.Executor;

@Configuration
public class AsyncConfig {

    @Bean
    public Executor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(500);
        executor.setThreadNamePrefix("EMA-");
        executor.initialize();
        return executor;
    }
}
```

### Explanation and Flow
1. **Input**: Symbol and trade date are passed through a GET request to `/api/ema`.
2. **Service**: The service fetches trade data for the previous 30 days and calculates the EMA using a separate thread for efficiency.
3. **Multithreading**: The `ThreadPoolTaskExecutor` is used to manage threads efficiently.
4. **Swagger**: Accessible at `/swagger-ui/index.html` for API documentation and testing.

This setup ensures efficiency through multi-threading and provides an easy-to-use API with Swagger support.
