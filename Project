package presentation;

import pojo.Admin;
import pojo.Customer;
import service.AdminService;
import service.AdminServiceImpl;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Collection;
import java.util.Scanner;
import java.util.UUID;

public class Presentation {
    private AdminService adminService;
    private CustomerService customerService;
    private boolean isAdminLoggedIn;
    private boolean isCustomerLoggedIn;

    public Presentation() {
        adminService = new AdminServiceImpl();
        customerService = new CustomerServiceImpl();
        isAdminLoggedIn = false;
        isCustomerLoggedIn = false;
    }

    public void present() {
        Scanner scan = new Scanner(System.in);

        while (true) {
            if (!isAdminLoggedIn && !isCustomerLoggedIn) {
                System.out.println("1. Register as Admin");
                System.out.println("2. Login as Admin");
                System.out.println("3. Register as Customer");
                System.out.println("4. Login as Customer");
                System.out.println("5. Exit");
                System.out.print("Enter your option: ");
                int option = scan.nextInt();
                scan.nextLine(); // consume newline

                switch (option) {
                    case 1: // Admin Registration
                        System.out.print("Enter admin name: ");
                        String adminName = scan.nextLine();
                        System.out.print("Enter password: ");
                        String adminPassword = scan.nextLine();
                        String adminId = UUID.randomUUID().toString().substring(0, 8);
                        Admin newAdmin = new Admin(adminId, adminName, adminPassword);
                        adminService.addAdmin(newAdmin);
                        System.out.println("Admin registered with ID: " + adminId);
                        break;

                    case 2: // Admin Login
                        System.out.print("Enter admin ID: ");
                        String loginAdminId = scan.nextLine();
                        System.out.print("Enter password: ");
                        String loginAdminPassword = scan.nextLine();
                        Admin admin = adminService.fetchAdmin(loginAdminId);
                        if (admin != null && admin.getPassword().equals(loginAdminPassword)) {
                            System.out.println("Admin login successful.");
                            isAdminLoggedIn = true;
                        } else {
                            System.out.println("Invalid credentials.");
                        }
                        break;

                    case 3: // Customer Registration
                        System.out.print("Enter customer name: ");
                        String customerName = scan.nextLine();
                        System.out.print("Enter address: ");
                        String address = scan.nextLine();
                        System.out.print("Enter meter number: ");
                        String meterNumber = scan.nextLine();
                        System.out.print("Enter password: ");
                        String customerPassword = scan.nextLine();
                        String customerId = UUID.randomUUID().toString().substring(0, 8);
                        Customer newCustomer = new Customer(customerId, customerName, address, meterNumber, customerPassword);
                        customerService.addCustomer(newCustomer);
                        System.out.println("Customer registered with ID: " + customerId);
                        break;

                    case 4: // Customer Login
                        System.out.print("Enter customer ID: ");
                        String loginCustomerId = scan.nextLine();
                        System.out.print("Enter password: ");
                        String loginCustomerPassword = scan.nextLine();
                        Customer customer = customerService.fetchCustomer(loginCustomerId);
                        if (customer != null && customer.getPassword().equals(loginCustomerPassword)) {
                            System.out.println("Customer login successful.");
                            isCustomerLoggedIn = true;
                        } else {
                            System.out.println("Invalid credentials.");
                        }
                        break;

                    case 5: // Exit
                        scan.close();
                        System.out.println("Exiting...");
                        return;

                    default:
                        System.out.println("Invalid option.");
                        break;
                }
            } else if (isAdminLoggedIn) {
                showAdminMenu(scan);
            } else if (isCustomerLoggedIn) {
                showCustomerMenu(scan);
            }
        }
    }

    private void showAdminMenu(Scanner scan) {
        while (isAdminLoggedIn) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Customer Details");
            System.out.println("2. View/Edit Customer Information");
            System.out.println("3. View Overdue Accounts");
            System.out.println("4. Logout");
            System.out.print("Enter your option: ");
            int option = scan.nextInt();
            scan.nextLine(); // consume newline

            switch (option) {
                case 1: // Add Customer Details
                    System.out.print("Enter name: ");
                    String name = scan.nextLine();
                    System.out.print("Enter address: ");
                    String address = scan.nextLine();
                    System.out.print("Enter meter number: ");
                    String meterNumber = scan.nextLine();
                    System.out.print("Enter password: ");
                    String password = scan.nextLine();
                    String id = UUID.randomUUID().toString().substring(0, 8);
                    Customer newCustomer = new Customer(id, name, address, meterNumber, password);
                    customerService.addCustomer(newCustomer);
                    System.out.println("Customer added with ID: " + id);
                    break;

                case 2: // View/Edit Customer Information
                    System.out.print("Enter customer ID: ");
                    String editId = scan.nextLine();
                    Customer customerToEdit = customerService.fetchCustomer(editId);
                    if (customerToEdit != null) {
                        System.out.println("Current Information: " + customerToEdit);
                        System.out.print("Enter new name (or leave blank): ");
                        String newName = scan.nextLine();
                        if (!newName.isEmpty()) {
                            customerToEdit.setName(newName);
                        }
                        System.out.print("Enter new address (or leave blank): ");
                        String newAddress = scan.nextLine();
                        if (!newAddress.isEmpty()) {
                            customerToEdit.setAddress(newAddress);
                        }
                        System.out.print("Enter new meter number (or leave blank): ");
                        String newMeterNumber = scan.nextLine();
                        if (!newMeterNumber.isEmpty()) {
                            customerToEdit.setMeterNumber(newMeterNumber);
                        }
                        System.out.print("Enter new password (or leave blank): ");
                        String newPassword = scan.nextLine();
                        if (!newPassword.isEmpty()) {
                            customerToEdit.setPassword(newPassword);
                        }
                        customerService.updateCustomer(customerToEdit);
                        System.out.println("Customer information updated.");
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 3: // View Overdue Accounts
                    System.out.println("Overdue Accounts:");
                    Collection<Customer> allCustomers = customerService.fetchAllCustomers();
                    allCustomers.forEach(cust -> {
                        if (cust.hasOverdueBills()) {
                            System.out.println("Customer ID: " + cust.getId() + ", Name: " + cust.getName());
                        }
                    });
                    break;

                case 4: // Logout
                    isAdminLoggedIn = false;
                    System.out.println("Admin logged out.");
                    break;

                default:
                    System.out.println("Invalid option.");
                    break;
            }
        }
    }

    private void showCustomerMenu(Scanner scan) {
        while (isCustomerLoggedIn) {
            System.out.println("\nCustomer Menu:");
            System.out.println("1. Record Electricity Usage");
            System.out.println("2. Generate Monthly Bill");
            System.out.println("3. View Bill History");
            System.out.println("4. Make a Payment");
            System.out.println("5. View Payment History");
            System.out.println("6. Logout");
            System.out.print("Enter your option: ");
            int option = scan.nextInt();
            scan.nextLine(); // consume newline

            switch (option) {
                case 1: // Record Electricity Usage
                    System.out.print("Enter electricity usage in units: ");
                    int usage = scan.nextInt();
                    scan.nextLine(); // consume newline
                    customerService.fetchCustomer(/* current customer ID */).recordUsage(usage);
                    System.out.println("Electricity usage recorded.");
                    break;

                case 2: // Generate Monthly Bill
                    Customer customer = customerService.fetchCustomer(/* current customer ID */);
                    double bill = customer.generateBill();
                    System.out.println("Generated bill: " + bill);
                    break;

                case 3: // View Bill History
                    Customer billCustomer = customerService.fetchCustomer(/* current customer ID */);
                    System.out.println("Bill History: " + billCustomer.getBillHistory());
                    break;

                case 4: // Make a Payment
                    System.out.print("Enter payment amount: ");
                    double payment = scan.nextDouble();
                    scan.nextLine(); // consume newline
                    customerService.fetchCustomer(/* current customer ID */).makePayment(payment);
                    System.out.println("Payment made.");
                    break;

                case 5: // View Payment History
                    Customer paymentCustomer = customerService.fetchCustomer(/* current customer ID */);
                    System.out.println("Payment History: " + paymentCustomer.getPaymentHistory());
                    break;

                case 6: // Logout
                    isCustomerLoggedIn = false;
                    System.out.println("Customer logged out.");
                    break;

                default:
                    System.out.println("Invalid option.");
                    break;
            }
        }
    }
}
