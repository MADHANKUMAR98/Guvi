CREATE TABLE Students (
    student_id VARCHAR2(50) PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100),
    phone VARCHAR2(15),
    course VARCHAR2(100),
    gpa NUMBER(3, 2)
);

CREATE TABLE Companies (
    company_id VARCHAR2(50) PRIMARY KEY,
    name VARCHAR2(100),
    location VARCHAR2(100),
    industry VARCHAR2(100)
);

CREATE TABLE Applications (
    application_id VARCHAR2(50) PRIMARY KEY,
    student_id VARCHAR2(50),
    company_id VARCHAR2(50),
    status VARCHAR2(20),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (company_id) REFERENCES Companies(company_id)
);

CREATE TABLE Interviews (
    interview_id VARCHAR2(50) PRIMARY KEY,
    application_id VARCHAR2(50),
    interview_date DATE,
    status VARCHAR2(20),
    FOREIGN KEY (application_id) REFERENCES Applications(application_id)
);

CREATE TABLE Placements (
    placement_id VARCHAR2(50) PRIMARY KEY,
    student_id VARCHAR2(50),
    company_id VARCHAR2(50),
    job_role VARCHAR2(100),
    package NUMBER(10, 2),
    placement_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (company_id) REFERENCES Companies(company_id)
);


import java.util.Scanner;

public class Main {
    private static StudentService studentService = new StudentServiceImpl();
    private static CompanyService companyService = new CompanyServiceImpl();
    private static ApplicationService applicationService = new ApplicationServiceImpl();
    private static InterviewService interviewService = new InterviewServiceImpl();
    private static PlacementService placementService = new PlacementServiceImpl();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            try {
                System.out.println("1. Add Student");
                System.out.println("2. Add Company");
                System.out.println("3. Apply to Company");
                System.out.println("4. Schedule Interview");
                System.out.println("5. Track Application Status");
                System.out.println("6. Generate Placement Report");
                System.out.println("7. Exit");

                int choice = sc.nextInt();
                switch (choice) {
                    case 1:
                        addStudent();
                        break;
                    case 2:
                        addCompany();
                        break;
                    case 3:
                        applyToCompany();
                        break;
                    case 4:
                        scheduleInterview();
                        break;
                    case 5:
                        trackApplicationStatus();
                        break;
                    case 6:
                        generatePlacementReport();
                        break;
                    case 7:
                        System.out.println("Exiting...");
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Invalid choice. Try again.");
                        break;
                }
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
            }
        }
    }

    private static void addStudent() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Student ID: ");
        String id = sc.nextLine();
        System.out.print("Enter Student Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Student Email: ");
        String email = sc.nextLine();
        System.out.print("Enter Student Phone: ");
        String phone = sc.nextLine();
        System.out.print("Enter Course: ");
        String course = sc.nextLine();
        System.out.print("Enter GPA: ");
        double gpa = sc.nextDouble();

        Student student = new Student(id, name, email, phone, course, gpa);
        try {
            studentService.addStudent(student);
            System.out.println("Student added successfully.");
        } catch (Exception e) {
            System.err.println("Error adding student: " + e.getMessage());
        }
    }

    private static void addCompany() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Company ID: ");
        String id = sc.nextLine();
        System.out.print("Enter Company Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Company Location: ");
        String location = sc.nextLine();
        System.out.print("Enter Industry Type: ");
        String industry = sc.nextLine();

        Company company = new Company(id, name, location, industry);
        try {
            companyService.addCompany(company);
            System.out.println("Company added successfully.");
        } catch (Exception e) {
            System.err.println("Error adding company: " + e.getMessage());
        }
    }

    private static void applyToCompany() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Application ID: ");
        String applicationId = sc.nextLine();
        System.out.print("Enter Student ID: ");
        String studentId = sc.nextLine();
        System.out.print("Enter Company ID: ");
        String companyId = sc.nextLine();

        Application application = new Application(applicationId, studentId, companyId, "Pending");
        try {
            applicationService.addApplication(application);
            System.out.println("Application submitted successfully.");
        } catch (Exception e) {
            System.err.println("Error applying to company: " + e.getMessage());
        }
    }

    private static void scheduleInterview() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Interview ID: ");
        String interviewId = sc.nextLine();
        System.out.print("Enter Application ID: ");
        String applicationId = sc.nextLine();
        System.out.print("Enter Interview Date (YYYY-MM-DD): ");
        String interviewDate = sc.nextLine();

        Interview interview = new Interview(interviewId, applicationId, interviewDate, "Scheduled");
        try {
            interviewService.addInterview(interview);
            System.out.println("Interview scheduled successfully.");
        } catch (Exception e) {
            System.err.println("Error scheduling interview: " + e.getMessage());
        }
    }

    private static void trackApplicationStatus() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Application ID: ");
        String applicationId = sc.nextLine();

        try {
            String status = applicationService.getApplicationStatus(applicationId);
            System.out.println("Application Status: " + status);
        } catch (Exception e) {
            System.err.println("Error tracking application status: " + e.getMessage());
        }
    }

    private static void generatePlacementReport() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Student ID: ");
        String studentId = sc.nextLine();

        try {
            Placement placement = placementService.getPlacementByStudentId(studentId);
            if (placement != null) {
                System.out.println("Placement Report:");
                System.out.println("Student ID: " + placement.getStudentId());
                System.out.println("Company ID: " + placement.getCompanyId());
                System.out.println("Job Role: " + placement.getJobRole());
                System.out.println("Package: " + placement.getPackage());
                System.out.println("Placement Date: " + placement.getPlacementDate());
            } else {
                System.out.println("No placement record found for the student.");
            }
        } catch (Exception e) {
            System.err.println("Error generating placement report: " + e.getMessage());
        }
    }
}
import java.util.List;

public interface ApplicationService {
    void addApplication(Application application) throws Exception;
    String getApplicationStatus(String applicationId) throws Exception;
}

import java.util.List;

public class ApplicationServiceImpl implements ApplicationService {
    private ApplicationDAO applicationDAO = new ApplicationDAOImpl();

    @Override
    public void addApplication(Application application) throws Exception {
        try {
            applicationDAO.addApplication(application);
        } catch (Exception e) {
            throw new Exception("Error in adding application: " + e.getMessage());
        }
    }

    @Override
    public String getApplicationStatus(String applicationId) throws Exception {
        try {
            return applicationDAO.getApplicationStatus(applicationId);
        } catch (Exception e) {
            throw new Exception("Error in retrieving application status: " + e.getMessage());
        }
    }
}

import java.util.List;

public interface InterviewService {
    void addInterview(Interview interview) throws Exception;
}

public class InterviewServiceImpl implements InterviewService {
    private InterviewDAO interviewDAO = new InterviewDAOImpl();

    @Override
    public void addInterview(Interview interview) throws Exception {
        try {
            interviewDAO.addInterview(interview);
        } catch (Exception e) {
            throw new Exception("Error in adding interview: " + e.getMessage());
        }
    }
}

public interface PlacementService {
    Placement getPlacementByStudentId(String studentId) throws Exception;
}
public class PlacementServiceImpl implements PlacementService {
    private PlacementDAO placementDAO = new PlacementDAOImpl();

    @Override
    public Placement getPlacementByStudentId(String studentId) throws Exception {
        try {
            return placementDAO.getPlacementByStudentId(studentId);
        } catch (Exception e) {
            throw new Exception("Error in fetching placement details: " + e.getMessage());
        }
    }
}
public interface ApplicationDAO {
    void addApplication(Application application) throws Exception;
    String getApplicationStatus(String applicationId) throws Exception;
}

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class ApplicationDAOImpl implements ApplicationDAO {
    private static final String INSERT_APPLICATION = "INSERT INTO Applications (application_id, student_id, company_id, status) VALUES (?, ?, ?, ?)";
    private static final String SELECT_APPLICATION_STATUS = "SELECT status FROM Applications WHERE application_id = ?";

    @Override
    public void addApplication(Application application) throws Exception {
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(INSERT_APPLICATION)) {
            ps.setString(1, application.getApplicationId());
            ps.setString(2, application.getStudentId());
            ps.setString(3, application.getCompanyId());
            ps.setString(4, application.getStatus());
            ps.executeUpdate();
        } catch (Exception e) {
            throw new Exception("Error in adding application to DB: " + e.getMessage());
        }
    }

    @Override
    public String getApplicationStatus(String applicationId) throws Exception {
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(SELECT_APPLICATION_STATUS)) {
            ps.setString(1, applicationId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("status");
                }
            }
        } catch (Exception e) {
            throw new Exception("Error in fetching application status: " + e.getMessage());
        }
        return null;
    }
}
public interface InterviewDAO {
    void addInterview(Interview interview) throws Exception;
}

import java.sql.Connection;
import java.sql.PreparedStatement;

public class InterviewDAOImpl implements InterviewDAO {
    private static final String INSERT_INTERVIEW = "INSERT INTO Interviews (interview_id, application_id, interview_date, status) VALUES (?, ?, ?, ?)";

    @Override
    public void addInterview(Interview interview) throws Exception {
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(INSERT_INTERVIEW)) {
            ps.setString(1, interview.getInterviewId());
            ps.setString(2, interview.getApplicationId());
            ps.setDate(3, java.sql.Date.valueOf(interview.getInterviewDate()));
            ps.setString(4, interview.getStatus());
            ps.executeUpdate();
        } catch (Exception e) {
            throw new Exception("Error in adding interview to DB: " + e.getMessage());
        }
    }
}

public interface PlacementDAO {
    Placement getPlacementByStudentId(String studentId) throws Exception;
}

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class PlacementDAOImpl implements PlacementDAO {
    private static final String SELECT_PLACEMENT_BY_STUDENT = "SELECT * FROM Placements WHERE student_id = ?";

    @Override
    public Placement getPlacementByStudentId(String studentId) throws Exception {
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(SELECT_PLACEMENT_BY_STUDENT)) {
            ps.setString(1, studentId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Placement placement = new Placement();
                    placement.setPlacementId(rs.getString("placement_id"));
                    placement.setStudentId(rs.getString("student_id"));
                    placement.setCompanyId(rs.getString("company_id"));
                    placement.setJobRole(rs.getString("job_role"));
                    placement.setPackage(rs.getDouble("package"));
                    placement.setPlacementDate(rs.getDate("placement_date").toString());
                    return placement;
                }
            }
        } catch (Exception e) {
            throw new Exception("Error in fetching placement details: " + e.getMessage());
        }
        return null;
    }
}

public class Application {
    private String applicationId;
    private String studentId;
    private String companyId;
    private String status;

    public Application(String applicationId, String studentId, String companyId, String status) {
        this.applicationId = applicationId;
        this.studentId = studentId;
        this.companyId = companyId;
        this.status = status;
    }

    // Getters and Setters
    public String getApplicationId() { return applicationId; }
    public void setApplicationId(String applicationId) { this.applicationId = applicationId; }

    public String getStudentId() { return studentId; }
    public void setStudentId(String studentId) { this.studentId = studentId; }

    public String getCompanyId() { return companyId; }
    public void setCompanyId(String companyId) { this.companyId = companyId; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

public class Interview {
    private String interviewId;
    private String applicationId;
    private String interviewDate;
    private String status;

    public Interview(String interviewId, String applicationId, String interviewDate, String status) {
        this.interviewId = interviewId;
        this.applicationId = applicationId;
        this.interviewDate = interviewDate;
        this.status = status;
    }

    // Getters and Setters
    public String getInterviewId() { return interviewId; }
    public void setInterviewId(String interviewId) { this.interviewId = interviewId; }

    public String getApplicationId() { return applicationId; }
    public void setApplicationId(String applicationId) { this.applicationId = applicationId; }

    public String getInterviewDate() { return interviewDate; }
    public void setInterviewDate(String interviewDate) { this.interviewDate = interviewDate; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

public class Placement {
    private String placementId;
    private String studentId;
    private String companyId;
    private String jobRole;
    private double packageAmount;
    private String placementDate;

    public Placement() {}

    // Getters and Setters
    public String getPlacementId() { return placementId; }
    public void setPlacementId(String placementId) { this.placementId = placementId; }

    public String getStudentId() { return studentId; }
    public void setStudentId(String studentId) { this.studentId = studentId; }

    public String getCompanyId() { return companyId; }
    public void setCompanyId(String companyId) { this.companyId = companyId; }

    public String getJobRole() { return jobRole; }
    public void setJobRole(String jobRole) { this.jobRole = jobRole; }

    public double getPackage() { return packageAmount; }
    public void setPackage(double packageAmount) { this.packageAmount = packageAmount; }

    public String getPlacementDate() { return placementDate; }
    public void setPlacementDate(String placementDate) { this.placementDate = placementDate; }
}
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtil {
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String DB_USER = "your_username";
    private static final String DB_PASSWORD = "your_password";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }
}


public class Student {
    private String studentId;
    private String name;
    private String department;
    private double cgpa;

    public Student(String studentId, String name, String department, double cgpa) {
        this.studentId = studentId;
        this.name = name;
        this.department = department;
        this.cgpa = cgpa;
    }

    public String getStudentId() {
        return studentId;
    }

    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getCgpa() {
        return cgpa;
    }

    public void setCgpa(double cgpa) {
        this.cgpa = cgpa;
    }

    @Override
    public String toString() {
        return "Student [studentId=" + studentId + ", name=" + name + ", department=" + department + ", cgpa=" + cgpa + "]";
    }
}

public class Company {
    private String companyId;
    private String name;
    private String location;
    private String industry;

    public Company(String companyId, String name, String location, String industry) {
        this.companyId = companyId;
        this.name = name;
        this.location = location;
        this.industry = industry;
    }

    public String getCompanyId() {
        return companyId;
    }

    public void setCompanyId(String companyId) {
        this.companyId = companyId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getIndustry() {
        return industry;
    }

    public void setIndustry(String industry) {
        this.industry = industry;
    }

    @Override
    public String toString() {
        return "Company [companyId=" + companyId + ", name=" + name + ", location=" + location + ", industry


