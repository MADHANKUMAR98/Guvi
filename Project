import java.sql.SQLException;
import java.util.List;

public interface CompanyDAO {
    void addCompany(Company company) throws SQLException;
    List<Company> getAllCompanies() throws SQLException;
    Company getCompanyById(int id) throws SQLException;
}

import java.sql.SQLException;
import java.util.List;

public interface ApplicationDAO {
    void addApplication(Application application) throws SQLException;
    List<Application> getApplicationsByStudent(int studentId) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface InterviewDAO {
    void scheduleInterview(Interview interview) throws SQLException;
    List<Interview> getInterviewsByApplication(int applicationId) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface PlacementDAO {
    void addPlacement(Placement placement) throws SQLException;
    List<Placement> getPlacementsByStudent(int studentId) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface PlacementDriveDAO {
    void addPlacementDrive(PlacementDrive drive) throws SQLException;
    List<PlacementDrive> getPlacementDrivesByCompany(int companyId) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface StudentService {
    void addStudent(Student student) throws SQLException;
    List<Student> getAllStudents() throws SQLException;
    Student getStudentById(int id) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface CompanyService {
    void addCompany(Company company) throws SQLException;
    List<Company> getAllCompanies() throws SQLException;
    Company getCompanyById(int id) throws SQLException;
}

import java.sql.SQLException;
import java.util.List;

public interface ApplicationService {
    void addApplication(Application application) throws SQLException;
    List<Application> getApplicationsByStudent(int studentId) throws SQLException;
}
import java.sql.SQLException;
import java.util.List;

public interface InterviewService {
    void scheduleInterview(Interview interview) throws SQLException;
    List<Interview> getInterviewsByApplication(int applicationId) throws SQLException;
}

import java.sql.SQLException;
import java.util.List;

public interface PlacementService {
    void addPlacement(Placement placement) throws SQLException;
    List<Placement> getPlacementsByStudent(int studentId) throws SQLException;
}

import java.sql.SQLException;
import java.util.List;

public interface PlacementDriveService {
    void addPlacementDrive(PlacementDrive drive) throws SQLException;
    List<PlacementDrive> getPlacementDrivesByCompany(int companyId) throws SQLException;
}




import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAOImpl implements StudentDAO {
    private Connection connection;

    public StudentDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void addStudent(Student student) throws SQLException {
        String query = "INSERT INTO Students (name, email, phone, course, year) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, student.getName());
            stmt.setString(2, student.getEmail());
            stmt.setString(3, student.getPhone());
            stmt.setString(4, student.getCourse());
            stmt.setInt(5, student.getYear());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<Student> getAllStudents() throws SQLException {
        List<Student> students = new ArrayList<>();
        String query = "SELECT * FROM Students";
        try (PreparedStatement stmt = connection.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Student student = new Student();
                student.setStudentId(rs.getInt("student_id"));
                student.setName(rs.getString("name"));
                student.setEmail(rs.getString("email"));
                student.setPhone(rs.getString("phone"));
                student.setCourse(rs.getString("course"));
                student.setYear(rs.getInt("year"));
                students.add(student);
            }
        }
        return students;
    }

    @Override
    public Student getStudentById(int id) throws SQLException {
        String query = "SELECT * FROM Students WHERE student_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Student student = new Student();
                    student.setStudentId(rs.getInt("student_id"));
                    student.setName(rs.getString("name"));
                    student.setEmail(rs.getString("email"));
                    student.setPhone(rs.getString("phone"));
                    student.setCourse(rs.getString("course"));
                    student.setYear(rs.getInt("year"));
                    return student;
                }
            }
        }
        return null;
    }
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CompanyDAOImpl implements CompanyDAO {
    private Connection connection;

    public CompanyDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void addCompany(Company company) throws SQLException {
        String query = "INSERT INTO Companies (name, location, industry) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, company.getName());
            stmt.setString(2, company.getLocation());
            stmt.setString(3, company.getIndustry());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<Company> getAllCompanies() throws SQLException {
        List<Company> companies = new ArrayList<>();
        String query = "SELECT * FROM Companies";
        try (PreparedStatement stmt = connection.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Company company = new Company();
                company.setCompanyId(rs.getInt("company_id"));
                company.setName(rs.getString("name"));
                company.setLocation(rs.getString("location"));
                company.setIndustry(rs.getString("industry"));
                companies.add(company);
            }
        }
        return companies;
    }

    @Override
    public Company getCompanyById(int id) throws SQLException {
        String query = "SELECT * FROM Companies WHERE company_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Company company = new Company();
                    company.setCompanyId(rs.getInt("company_id"));
                    company.setName(rs.getString("name"));
                    company.setLocation(rs.getString("location"));
                    company.setIndustry(rs.getString("industry"));
                    return company;
                }
            }
        }
        return null;
    }
}


import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ApplicationDAOImpl implements ApplicationDAO {
    private Connection connection;

    public ApplicationDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void addApplication(Application application) throws SQLException {
        String query = "INSERT INTO Applications (student_id, company_id, status) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, application.getStudentId());
            stmt.setInt(2, application.getCompanyId());
            stmt.setString(3, application.getStatus());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<Application> getApplicationsByStudent(int studentId) throws SQLException {
        List<Application> applications = new ArrayList<>();
        String query = "SELECT * FROM Applications WHERE student_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, studentId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Application application = new Application();
                    application.setApplicationId(rs.getInt("application_id"));
                    application.setStudentId(rs.getInt("student_id"));
                    application.setCompanyId(rs.getInt("company_id"));
                    application.setStatus(rs.getString("status"));
                    applications.add(application);
                }
            }
        }
        return applications;
    }
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class InterviewDAOImpl implements InterviewDAO {
    private Connection connection;

    public InterviewDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void scheduleInterview(Interview interview) throws SQLException {
        String query = "INSERT INTO Interviews (application_id, interview_date, interview_time, status) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, interview.getApplicationId());
            stmt.setDate(2, Date.valueOf(interview.getInterviewDate()));
            stmt.setString(3, interview.getInterviewTime());
            stmt.setString(4, interview.getStatus());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<Interview> getInterviewsByApplication(int applicationId) throws SQLException {
        List<Interview> interviews = new ArrayList<>();
        String query = "SELECT * FROM Interviews WHERE application_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, applicationId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Interview interview = new Interview();
                    interview.setInterviewId(rs.getInt("interview_id"));
                    interview.setApplicationId(rs.getInt("application_id"));
                    interview.setInterviewDate(rs.getDate("interview_date").toLocalDate());
                    interview.setInterviewTime(rs.getString("interview_time"));
                    interview.setStatus(rs.getString("status"));
                    interviews.add(interview);
                }
            }
        }
        return interviews;
    }
}


import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PlacementDAOImpl implements PlacementDAO {
    private Connection connection;

    public PlacementDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void addPlacement(Placement placement) throws SQLException {
        String query = "INSERT INTO Placements (student_id, company_id, placement_date, salary) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, placement.getStudentId());
            stmt.setInt(2, placement.getCompanyId());
            stmt.setDate(3, Date.valueOf(placement.getPlacementDate()));
            stmt.setDouble(4, placement.getSalary());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<Placement> getPlacementsByStudent(int studentId) throws SQLException {
        List<Placement> placements = new ArrayList<>();
        String query = "SELECT * FROM Placements WHERE student_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, studentId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Placement placement = new Placement();
                    placement.setPlacementId(rs.getInt("placement_id"));
                    placement.setStudentId(rs.getInt("student_id"));
                    placement.setCompanyId(rs.getInt("company_id"));
                    placement.setPlacementDate(rs.getDate("placement_date").toLocalDate());
                    placement.setSalary(rs.getDouble("salary"));
                    placements.add(placement);
                }
            }
        }
        return placements;
    }
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PlacementDriveDAOImpl implements PlacementDriveDAO {
    private Connection connection;

    public PlacementDriveDAOImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public void addPlacementDrive(PlacementDrive drive) throws SQLException {
        String query = "INSERT INTO PlacementDrives (company_id, drive_date, location, description) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, drive.getCompanyId());
            stmt.setDate(2, Date.valueOf(drive.getDriveDate()));
            stmt.setString(3, drive.getLocation());
            stmt.setString(4, drive.getDescription());
            stmt.executeUpdate();
        }
    }

    @Override
    public List<PlacementDrive> getPlacementDrivesByCompany(int companyId) throws SQLException {
        List<PlacementDrive> drives = new ArrayList<>();
        String query = "SELECT * FROM PlacementDrives WHERE company_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, companyId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    PlacementDrive drive = new PlacementDrive();
                    drive.setDriveId(rs.getInt("drive_id"));
                    drive.setCompanyId(rs.getInt("company_id"));
                    drive.setDriveDate(rs.getDate("drive_date").toLocalDate());
                    drive.setLocation(rs.getString("location"));
                    drive.setDescription(rs.getString("description"));
                    drives.add(drive);
                }
            }
        }
        return drives;
    }
}

import java.sql.SQLException;
import java.util.List;

public class StudentServiceImpl implements StudentService {
    private StudentDAO studentDAO;

    public StudentServiceImpl(StudentDAO studentDAO) {
        this.studentDAO = studentDAO;
    }

    @Override
    public void addStudent(Student student) throws SQLException {
        studentDAO.addStudent(student);
    }

    @Override
    public List<Student> getAllStudents() throws SQLException {
        return studentDAO.getAllStudents();
    }

    @Override
    public Student getStudentById(int id) throws SQLException {
        return studentDAO.getStudentById(id);
    }
}

import java.sql.SQLException;
import java.util.List;

public class CompanyServiceImpl implements CompanyService {
    private CompanyDAO companyDAO;

    public CompanyServiceImpl(CompanyDAO companyDAO) {
        this.companyDAO = companyDAO;
    }

    @Override
    public void addCompany(Company company) throws SQLException {
        companyDAO.addCompany(company);
    }

    @Override
    public List<Company> getAllCompanies() throws SQLException {
        return companyDAO.getAllCompanies();
    }

    @Override
    public Company getCompanyById(int id) throws SQLException {
        return companyDAO.getCompanyById(id);
    }
}

import java.sql.SQLException;
import java.util.List;

public class ApplicationServiceImpl implements ApplicationService {
    private ApplicationDAO applicationDAO;

    public ApplicationServiceImpl(ApplicationDAO applicationDAO) {
        this.applicationDAO = applicationDAO;
    }

    @Override
    public void addApplication(Application application) throws SQLException {
        applicationDAO.addApplication(application);
    }

    @Override
    public List<Application> getApplicationsByStudent(int studentId) throws SQLException {
        return applicationDAO.getApplicationsByStudent(studentId);
    }
}

import java.sql.SQLException;
import java.util.List;

public class InterviewServiceImpl implements InterviewService {
    private InterviewDAO interviewDAO;

    public InterviewServiceImpl(InterviewDAO interviewDAO) {
        this.interviewDAO = interviewDAO;
    }

    @Override
    public void scheduleInterview(Interview interview) throws SQLException {
        interviewDAO.scheduleInterview(interview);
    }

    @Override
    public List<Interview> getInterviewsByApplication(int applicationId) throws SQLException {
        return interviewDAO.getInterviewsByApplication(applicationId);
    }
}


import java.sql.SQLException;
import java.util.List;

public class PlacementServiceImpl implements PlacementService {
    private PlacementDAO placementDAO;

    public PlacementServiceImpl(PlacementDAO placementDAO) {
        this.placementDAO = placementDAO;
    }

    @Override
    public void addPlacement(Placement placement) throws SQLException {
        placementDAO.addPlacement(placement);
    }

    @Override
    public List<Placement> getPlacementsByStudent(int studentId) throws SQLException {
        return placementDAO.getPlacementsByStudent(studentId);
    }
}

import java.sql.SQLException;
import java.util.List;

public class PlacementDriveServiceImpl implements PlacementDriveService {
    private PlacementDriveDAO placementDriveDAO;

    public PlacementDriveServiceImpl(PlacementDriveDAO placementDriveDAO) {
        this.placementDriveDAO = placementDriveDAO;
    }

    @Override
    public void addPlacementDrive(PlacementDrive drive) throws SQLException {
        placementDriveDAO.addPlacementDrive(drive);
    }

    @Override
    public List<PlacementDrive> getPlacementDrivesByCompany(int companyId) throws SQLException {
        return placementDriveDAO.getPlacementDrivesByCompany(companyId);
    }
}










