package presentation;

import java.util.InputMismatchException;
import java.util.Map;
import java.util.Scanner;
import pojo.Customer;
import service.CustomerService;

public class Presentation {

    private final CustomerService customerService;
    private String loggedInAdminId;
    private String loggedInCustomerId;

    public Presentation(CustomerService customerService) {
        this.customerService = customerService;
    }

    public void present(Scanner scan) {
        while (true) {
            try {
                System.out.println("Welcome to the Electricity Billing System");
                System.out.println("1. Admin Login");
                System.out.println("2. Customer Login");
                System.out.println("3. Customer Register");
                System.out.println("4. Exit");
                System.out.print("Choose an option: ");

                int choice = scan.nextInt();

                switch (choice) {
                    case 1:
                        adminLogin(scan);
                        break;
                    case 2:
                        customerLogin(scan);
                        break;
                    case 3:
                        customerRegister(scan);
                        break;
                    case 4:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scan.next(); // Clear the invalid input
            } catch (Exception e) {
                System.out.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void adminLogin(Scanner scan) {
        try {
            System.out.print("Enter Admin ID: ");
            String adminId = scan.next();
            System.out.print("Enter Admin Password: ");
            String password = scan.next();

            if ("admin1".equals(adminId) && "1234".equals(password)) {
                loggedInAdminId = adminId;
                System.out.println("Admin login successful.");
                adminMenu(scan);
            } else {
                System.out.println("Invalid Admin credentials.");
            }
        } catch (Exception e) {
            System.out.println("Error during Admin login: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void adminMenu(Scanner scan) {
        while (true) {
            try {
                System.out.println("Admin Menu:");
                System.out.println("1. Add Customer");
                System.out.println("2. View All Customers");
                System.out.println("3. Edit Customer");
                System.out.println("4. Delete Customer");
                System.out.println("5. View Pending Bills of Customer");
                System.out.println("6. Logout");
                System.out.print("Choose an option: ");

                int choice = scan.nextInt();

                switch (choice) {
                    case 1:
                        addCustomer(scan);
                        break;
                    case 2:
                        viewAllCustomers();
                        break;
                    case 3:
                        editCustomer(scan);
                        break;
                    case 4:
                        deleteCustomer(scan);
                        break;
                    case 5:
                        viewPendingBills(scan);
                        break;
                    case 6:
                        loggedInAdminId = null;
                        System.out.println("Logged out successfully.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scan.next(); // Clear the invalid input
            } catch (Exception e) {
                System.out.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void customerLogin(Scanner scan) {
        try {
            System.out.print("Enter Customer ID: ");
            String customerId = scan.next();

            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null) {
                loggedInCustomerId = customerId;
                System.out.println("Customer login successful.");
                customerMenu(scan);
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("Error during Customer login: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void customerMenu(Scanner scan) {
        while (true) {
            try {
                System.out.println("Customer Menu:");
                System.out.println("1. Record Electricity Usage");
                System.out.println("2. Generate Monthly Bill");
                System.out.println("3. Make Payment");
                System.out.println("4. View Payment History");
                System.out.println("5. Logout");
                System.out.print("Choose an option: ");

                int choice = scan.nextInt();

                switch (choice) {
                    case 1:
                        recordElectricityUsage(scan);
                        break;
                    case 2:
                        generateMonthlyBill(scan);
                        break;
                    case 3:
                        makePayment(scan);
                        break;
                    case 4:
                        viewPaymentHistory();
                        break;
                    case 5:
                        loggedInCustomerId = null;
                        System.out.println("Logged out successfully.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scan.next(); // Clear the invalid input
            } catch (Exception e) {
                System.out.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void customerRegister(Scanner scan) {
        try {
            System.out.print("Enter new Customer ID: ");
            String customerId = scan.next();

            System.out.print("Enter Customer Name: ");
            String name = scan.next();

            Customer customer = new Customer(customerId, name);
            customerService.addCustomer(customer);
            System.out.println("Customer registered successfully.");
        } catch (Exception e) {
            System.out.println("Error during Customer registration: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void addCustomer(Scanner scan) {
        try {
            System.out.print("Enter new Customer ID: ");
            String customerId = scan.next();

            System.out.print("Enter Customer Name: ");
            String name = scan.next();

            Customer customer = new Customer(customerId, name);
            customerService.addCustomer(customer);
            System.out.println("Customer added successfully.");
        } catch (Exception e) {
            System.out.println("Error while adding customer: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void viewAllCustomers() {
        try {
            System.out.println("All Customers:");
            for (Customer customer : customerService.getAllCustomers()) {
                System.out.println(customer);
            }
        } catch (Exception e) {
            System.out.println("Error while viewing customers: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void editCustomer(Scanner scan) {
        try {
            System.out.print("Enter Customer ID to edit: ");
            String customerId = scan.next();

            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null) {
                System.out.print("Enter new Customer Name: ");
                String name = scan.next();
                customer.setName(name);
                customerService.updateCustomer(customer);
                System.out.println("Customer updated successfully.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("Error while editing customer: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void deleteCustomer(Scanner scan) {
        try {
            System.out.print("Enter Customer ID to delete: ");
            String customerId = scan.next();

            boolean success = customerService.deleteCustomer(customerId);

            if (success) {
                System.out.println("Customer deleted successfully.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("Error while deleting customer: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void viewPendingBills(Scanner scan) {
        try {
            System.out.print("Enter Customer ID to view pending bills: ");
            String customerId = scan.next();

            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null) {
                Map<String, Double> pendingBills = customer.getPendingBills();

                if (pendingBills.isEmpty()) {
                    System.out.println("No pending bills.");
                } else {
                    System.out.println("Pending Bills:");
                    pendingBills.forEach((month, amount) -> {
                        System.out.println("Month: " + month + ", Amount: " + amount);
                    });
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("Error while viewing pending bills: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void recordElectricityUsage(Scanner scan) {
        try {
            System.out.print("Enter Month (e.g., Jan): ");
            String month = scan.next();

            System.out.print("Enter Usage in kWh: ");
            int usageInKwh = scan.nextInt();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);

            if (customer != null) {
                customer.addUsage(month, usageInKwh);
                customerService.updateCustomer(customer);
                System.out.println("Electricity usage recorded.");
            } else {
                System.out.println("Customer not found.");
           
            } else {
                System.out.println("Customer not found.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid number.");
            scan.next(); // Clear the invalid input
        } catch (Exception e) {
            System.out.println("An error occurred while recording electricity usage: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void generateMonthlyBill(Scanner scan) {
        try {
            System.out.print("Enter Month (e.g., Jan): ");
            String month = scan.next();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);

            if (customer != null) {
                double billAmount = customer.generateBill(month);

                if (billAmount > 0) {
                    System.out.println("Bill for " + month + ": " + billAmount);
                    customerService.updateCustomer(customer);
                } else {
                    System.out.println("No usage recorded for " + month + ".");
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid month.");
            scan.next(); // Clear the invalid input
        } catch (Exception e) {
            System.out.println("An error occurred while generating the bill: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void makePayment(Scanner scan) {
        try {
            System.out.print("Enter Month (e.g., Jan): ");
            String month = scan.next();

            System.out.print("Enter Payment Amount: ");
            double payment = scan.nextDouble();

            Customer customer = customerService.fetchCustomer(loggedInCustomerId);

            if (customer != null) {
                double billAmount = customer.generateBill(month);

                if (billAmount > 0) {
                    if (payment >= billAmount) {
                        customer.makePayment(month, payment);
                        customerService.updateCustomer(customer);
                        System.out.println("Payment of " + payment + " for " + month + " is successful.");
                    } else {
                        System.out.println("Insufficient payment. Bill amount for " + month + " is " + billAmount);
                    }
                } else {
                    System.out.println("No pending bill for " + month + ".");
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid number.");
            scan.next(); // Clear the invalid input
        } catch (Exception e) {
            System.out.println("An error occurred while making the payment: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void viewPaymentHistory() {
        try {
            Customer customer = customerService.fetchCustomer(loggedInCustomerId);

            if (customer != null) {
                System.out.println("Payment History:");
                Map<String, Double> payments = customer.getPaymentHistory();

                if (payments.isEmpty()) {
                    System.out.println("No payment history available.");
                } else {
                    payments.forEach((month, amount) -> {
                        System.out.println("Month: " + month + ", Amount: " + amount);
                    });
                }
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("An error occurred while viewing payment history: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
