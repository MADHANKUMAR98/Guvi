package presentation;

import pojo.Customer;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Collection;
import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

public class Presentation {

    Scanner scan = new Scanner(System.in);
    private CustomerService customerService = new CustomerServiceImpl();
    private boolean isAdminLoggedIn = false;
    private boolean isCustomerLoggedIn = false;
    private String loggedInCustomerId = null;

    public void present() {
        System.out.println("Welcome to the Electricity Billing System!");

        while (true) {
            try {
                System.out.println("1. Admin Login");
                System.out.println("2. Customer Login");
                System.out.println("3. Customer Register");
                System.out.println("4. Exit");

                System.out.print("Enter your choice: ");
                int choice = scan.nextInt();
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1: // Admin Login
                        adminLogin();
                        break;
                    case 2: // Customer Login
                        customerLogin();
                        break;
                    case 3: // Customer Register
                        customerRegister();
                        break;
                    case 4: // Exit
                        System.out.println("Exiting...");
                        scan.close();
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
                scan.nextLine(); // Clear scanner buffer
            }
        }
    }

    private void adminLogin() {
        try {
            System.out.print("Enter Admin ID: ");
            String adminId = scan.nextLine();
            System.out.print("Enter Password: ");
            String password = scan.nextLine();

            if ("admin1".equals(adminId) && "1234".equals(password)) {
                isAdminLoggedIn = true;
                adminMenu();
            } else {
                System.out.println("Invalid Admin credentials.");
            }
        } catch (Exception e) {
            System.out.println("An error occurred during admin login: " + e.getMessage());
        }
    }

    private void adminMenu() {
        while (isAdminLoggedIn) {
            try {
                System.out.println("Admin Menu:");
                System.out.println("1. Add Customer");
                System.out.println("2. View All Customers");
                System.out.println("3. Edit Customer");
                System.out.println("4. Delete Customer");
                System.out.println("5. View Pending Bills");
                System.out.println("6. Logout");

                System.out.print("Enter your choice: ");
                int choice = scan.nextInt();
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1: // Add Customer
                        addCustomer();
                        break;
                    case 2: // View All Customers
                        viewAllCustomers();
                        break;
                    case 3: // Edit Customer
                        editCustomer();
                        break;
                    case 4: // Delete Customer
                        deleteCustomer();
                        break;
                    case 5: // View Pending Bills
                        viewPendingBills();
                        break;
                    case 6: // Logout
                        isAdminLoggedIn = false;
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred in the admin menu: " + e.getMessage());
                scan.nextLine(); // Clear scanner buffer
            }
        }
    }

    private void addCustomer() {
        try {
            System.out.print("Enter name: ");
            String name = scan.nextLine();
            System.out.print("Enter address: ");
            String address = scan.nextLine();
            System.out.print("Enter meter number: ");
            String meterNumber = scan.nextLine();
            System.out.print("Enter password: ");
            String password = scan.nextLine();

            UUID uuid = UUID.randomUUID();
            String id = uuid.toString().replaceAll("-", "").toUpperCase().substring(0, 8);

            Customer newCustomer = new Customer(id, name, address, meterNumber, password);
            customerService.addCustomer(newCustomer);

            System.out.println("Customer added with ID: " + id);
        } catch (Exception e) {
            System.out.println("An error occurred while adding a customer: " + e.getMessage());
        }
    }

    private void viewAllCustomers() {
        try {
            Collection<Customer> customers = customerService.fetchAllCustomers();
            System.out.println("All Customers:");
            for (Customer customer : customers) {
                System.out.println(customer);
            }
        } catch (Exception e) {
            System.out.println("An error occurred while viewing all customers: " + e.getMessage());
        }
    }

    private void editCustomer() {
        try {
            System.out.print("Enter customer ID to edit: ");
            String customerId = scan.nextLine();
            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null) {
                System.out.println("Current Information: " + customer);

                System.out.print("Enter new name (or leave blank to keep current): ");
                String newName = scan.nextLine();
                if (!newName.isEmpty()) {
                    customer.setName(newName);
                }

                System.out.print("Enter new address (or leave blank to keep current): ");
                String newAddress = scan.nextLine();
                if (!newAddress.isEmpty()) {
                    customer.setAddress(newAddress);
                }

                System.out.print("Enter new meter number (or leave blank to keep current): ");
                String newMeterNumber = scan.nextLine();
                if (!newMeterNumber.isEmpty()) {
                    customer.setMeterNumber(newMeterNumber);
                }

                System.out.print("Enter new password (or leave blank to keep current): ");
                String newPassword = scan.nextLine();
                if (!newPassword.isEmpty()) {
                    customer.setPassword(newPassword);
                }

                customerService.updateCustomer(customer);
                System.out.println("Customer information updated.");
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("An error occurred while editing the customer: " + e.getMessage());
        }
    }

    private void deleteCustomer() {
        try {
            System.out.print("Enter customer ID to delete: ");
            String customerId = scan.nextLine();
            customerService.deleteCustomer(customerId);
            System.out.println("Customer deleted.");
        } catch (Exception e) {
            System.out.println("An error occurred while deleting the customer: " + e.getMessage());
        }
    }

    private void viewPendingBills() {
        try {
            System.out.print("Enter customer ID to view pending bills: ");
            String customerId = scan.nextLine();
            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null) {
                System.out.println("Pending Bills:");
                Map<String, Double> bills = customer.getBills();
                bills.forEach((month, amount) -> {
                    if (amount > 0) {
                        System.out.println("Month: " + month + ", Amount: Rs " + amount);
                    }
                });
            } else {
                System.out.println("Customer not found.");
            }
        } catch (Exception e) {
            System.out.println("An error occurred while viewing pending bills: " + e.getMessage());
        }
    }

    private void customerLogin() {
        try {
            System.out.print("Enter Customer ID: ");
            String customerId = scan.nextLine();
            System.out.print("Enter Password: ");
            String password = scan.nextLine();

            Customer customer = customerService.fetchCustomer(customerId);

            if (customer != null && customer.getPassword().equals(password)) {
                loggedInCustomerId = customerId;
                isCustomerLoggedIn = true;
                customerMenu();
            } else {
                System.out.println("Invalid customer credentials.");
            }
        } catch (Exception e) {
            System.out.println("An error occurred during customer login: " + e.getMessage());
        }
    }

    private void customerRegister() {
        try {
            if (isCustomerLoggedIn) {
                System.out.println("You are already logged in.");
                return;
            }

            System.out.print("Enter name: ");
            String name = scan.nextLine();
            System.out.print("Enter address: ");
            String address = scan.nextLine();
            System.out.print("Enter meter number: ");
            String meterNumber = scan.nextLine();
            System.out.print("Enter password: ");
            String password = scan.nextLine();

            UUID uuid = UUID.randomUUID();
            String id = uuid.toString().replaceAll("-", "").toUpperCase().substring(0, 8);

            Customer newCustomer = new Customer(id, name, address, meterNumber, password);
            customerService.addCustomer(newCustomer);

            System.out.println("Customer registered with ID: " + id);
        } catch (Exception e) {
            System.out.println("An error occurred during customer registration: " + e.getMessage());
        }
    }

    private void customerMenu() {
        while (isCustomerLoggedIn) {
            try {
                System.out.println("Customer Menu:");
                System.out.println("1. Record Electricity Usage");
                System.out.println("2. Generate Monthly Bill");
                System.out.println("3. View Bill History");
                System.out.println("4. Make a Payment");
                System.out.println("5. View Payment History");
                System.out.println("6. Logout");

                System.out.print("Enter your choice: ");
                int choice = scan.nextInt();
                scan.nextLine(); // Consume
                scan.nextLine(); // Consume newline

                switch (choice) {
                    case 1: // Record Electricity Usage
                        recordElectricityUsage();
                        break;
                    case 2: // Generate Monthly Bill
                        generateMonthlyBill();
                        break;
                    case 3: // View Bill History
                        viewBillHistory();
                        break;
                    case 4: // Make a Payment
                        makePayment();
                        break;
                    case 5: // View Payment History
                        viewPaymentHistory();
                        break;
                    case 6: // Logout
                        isCustomerLoggedIn = false;
                        loggedInCustomerId = null;
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred in the customer menu: " + e.getMessage());
                scan.nextLine(); // Clear scanner buffer
            }
        }
    }

    private void recordElectricityUsage() {
        try {
            System.out.print("Enter month (e.g., January): ");
            String month = scan.nextLine();
            System.out.print("Enter electricity used (in kWh): ");
            double electricityUsed = scan.nextDouble();

            customerService.recordElectricityUsage(loggedInCustomerId, month, electricityUsed);
            System.out.println("Electricity usage recorded for " + month + ".");
        } catch (Exception e) {
            System.out.println("An error occurred while recording electricity usage: " + e.getMessage());
            scan.nextLine(); // Clear scanner buffer
        }
    }

    private void generateMonthlyBill() {
        try {
            System.out.print("Enter month to generate bill for: ");
            String month = scan.nextLine();

            double billAmount = customerService.generateBill(loggedInCustomerId, month);
            System.out.println("Generated bill for " + month + ": Rs " + billAmount);
        } catch (Exception e) {
            System.out.println("An error occurred while generating the bill: " + e.getMessage());
        }
    }

    private void viewBillHistory() {
        try {
            System.out.println("Bill History:");
            Map<String, Double> bills = customerService.fetchBillHistory(loggedInCustomerId);
            bills.forEach((month, amount) -> System.out.println("Month: " + month + ", Amount: Rs " + amount));
        } catch (Exception e) {
            System.out.println("An error occurred while viewing the bill history: " + e.getMessage());
        }
    }

    private void makePayment() {
        try {
            System.out.print("Enter month to pay for: ");
            String month = scan.nextLine();

            double amountDue = customerService.fetchBill(loggedInCustomerId, month);
            if (amountDue > 0) {
                System.out.print("Enter payment amount: ");
                double paymentAmount = scan.nextDouble();

                if (paymentAmount <= amountDue) {
                    customerService.makePayment(loggedInCustomerId, month, paymentAmount);
                    System.out.println("Payment of Rs " + paymentAmount + " made for " + month + ".");
                } else {
                    System.out.println("Payment exceeds the due amount. Please try again.");
                }
            } else {
                System.out.println("No amount due for " + month + ".");
            }
        } catch (Exception e) {
            System.out.println("An error occurred while making the payment: " + e.getMessage());
            scan.nextLine(); // Clear scanner buffer
        }
    }

    private void viewPaymentHistory() {
        try {
            System.out.println("Payment History:");
            Map<String, Double> payments = customerService.fetchPaymentHistory(loggedInCustomerId);
            payments.forEach((month, amount) -> System.out.println("Month: " + month + ", Paid: Rs " + amount));
        } catch (Exception e) {
            System.out.println("An error occurred while viewing the payment history: " + e.getMessage());
        }
    }
}
