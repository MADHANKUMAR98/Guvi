package pojo;

import java.util.HashMap;
import java.util.Map;

public class CustomerPojo {
    private String customerId;
    private String name;
    private String address;
    private String meterNumber;
    private String password;
    private Map<String, Integer> usageHistory; // Stores month and usage in kWh
    private Map<String, Double> billHistory;    // Stores month and bill amount
    private Map<String, Double> paymentHistory; // Stores month and payment amount

    public CustomerPojo(String customerId, String name, String address, String meterNumber, String password) {
        this.customerId = customerId;
        this.name = name;
        this.address = address;
        this.meterNumber = meterNumber;
        this.password = password;
        this.usageHistory = new HashMap<>();
        this.billHistory = new HashMap<>();
        this.paymentHistory = new HashMap<>();
    }

    // Getters and Setters
    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getMeterNumber() {
        return meterNumber;
    }

    public void setMeterNumber(String meterNumber) {
        this.meterNumber = meterNumber;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Map<String, Integer> getUsageHistory() {
        return usageHistory;
    }

    public void addUsage(String month, int usageInKwh) {
        this.usageHistory.put(month, usageInKwh);
    }

    public Map<String, Double> getBillHistory() {
        return billHistory;
    }

    public void addBill(String month, double amount) {
        this.billHistory.put(month, amount);
    }

    public Map<String, Double> getPaymentHistory() {
        return paymentHistory;
    }

    public void addPayment(String month, double amount) {
        this.paymentHistory.put(month, amount);
    }

    public double getTotalAmountDue(String month) {
        return billHistory.getOrDefault(month, 0.0) - paymentHistory.getOrDefault(month, 0.0);
    }

    @Override
    public String toString() {
        return "CustomerPojo [customerId=" + customerId + ", name=" + name + ", address=" + address + ", meterNumber=" + meterNumber + "]";
    }
}
package dao;

import pojo.CustomerPojo;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

public class CustomerDaoCollectionImpl implements CustomerDao {
    private Map<String, CustomerPojo> customerDataStore = new HashMap<>();

    @Override
    public CustomerPojo addCustomer(CustomerPojo customer) {
        customerDataStore.put(customer.getCustomerId(), customer);
        return customer;
    }

    @Override
    public CustomerPojo getCustomer(String customerId) {
        return customerDataStore.get(customerId);
    }

    @Override
    public CustomerPojo updateCustomer(CustomerPojo customer) {
        return customerDataStore.replace(customer.getCustomerId(), customer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerDataStore.remove(customerId);
    }

    @Override
    public Collection<CustomerPojo> getAllCustomers() {
        return customerDataStore.values();
    }
}
package service;

import pojo.CustomerPojo;

import java.util.Collection;

public interface CustomerService {
    CustomerPojo registerCustomer(CustomerPojo customer);
    CustomerPojo loginCustomer(String customerId, String password);
    CustomerPojo editCustomer(CustomerPojo customer);
    void deleteCustomer(String customerId);
    CustomerPojo getCustomer(String customerId);
    Collection<CustomerPojo> getAllCustomers();
    void addUsage(String customerId, String month, int usageInKwh);
    void generateMonthlyBill(String customerId, String month, double unitPrice);
    void makePayment(String customerId, String month, double amount);
}

package service;

import dao.CustomerDao;
import dao.CustomerDaoCollectionImpl;
import pojo.CustomerPojo;

import java.util.Collection;

public class CustomerServiceImpl implements CustomerService {
    private CustomerDao customerDao;

    public CustomerServiceImpl() {
        customerDao = new CustomerDaoCollectionImpl();
    }

    @Override
    public CustomerPojo registerCustomer(CustomerPojo customer) {
        return customerDao.addCustomer(customer);
    }

    @Override
    public CustomerPojo loginCustomer(String customerId, String password) {
        CustomerPojo customer = customerDao.getCustomer(customerId);
        if (customer != null && customer.getPassword().equals(password)) {
            return customer;
        }
        return null;
    }

    @Override
    public CustomerPojo editCustomer(CustomerPojo customer) {
        return customerDao.updateCustomer(customer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerDao.deleteCustomer(customerId);
    }

    @Override
    public CustomerPojo getCustomer(String customerId) {
        return customerDao.getCustomer(customerId);
    }

    @Override
    public Collection<CustomerPojo> getAllCustomers() {
        return customerDao.getAllCustomers();
    }

    @Override
    public void addUsage(String customerId, String month, int usageInKwh) {
        CustomerPojo customer = customerDao.getCustomer(customerId);
        if (customer != null) {
            customer.addUsage(month, usageInKwh);
        }
    }

    @Override
    public void generateMonthlyBill(String customerId, String month, double unitPrice) {
        CustomerPojo customer = customerDao.getCustomer(customerId);
        if (customer != null) {
            int usage = customer.getUsageHistory().getOrDefault(month, 0);
            double amount = usage * unitPrice;
            customer.addBill(month, amount);
        }
    }

    @Override
    public void makePayment(String customerId, String month, double amount) {
        CustomerPojo customer = customerDao.getCustomer(customerId);
        if (customer != null) {
            customer.addPayment(month, amount);
        }
    }
}

package presentation;

import pojo.CustomerPojo;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Collection;
import java.util.Scanner;

public class CustomerPresentation {
    private CustomerService customerService;

    public CustomerPresentation() {
        customerService = new CustomerServiceImpl();
    }

    public void execute() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Register Customer");
            System.out.println("2. Login Customer");
            System.out.println("3. Add Usage");
            System.out.println("4. Generate Monthly Bill");
            System.out.println("5. Make Payment");
            System.out.println("6. View and Edit Customer Information");
            System.out.println("7. View Bill History");
            System.out.println("8. View Payment History");
            System.out.println("9. View Overdue Accounts");
            System.out.println("10. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    System.out.print("Enter Customer ID: ");
                    String regId = scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String regName = scanner.nextLine();
                    System.out.print("Enter Address: ");
                    String regAddress = scanner.nextLine();
                    System.out.print("Enter Meter Number: ");
                    String regMeterNumber = scanner.nextLine();
                    System.out.print("Enter Password: ");
                    String regPassword = scanner.nextLine();
                    CustomerPojo newCustomer = new CustomerPojo(regId, regName, regAddress, regMeterNumber, regPassword);
                    customerService.registerCustomer(newCustomer);
                    System.out.println("Customer registered successfully.");
                    break;

                case 2:
                    System.out.print("Enter Customer ID: ");
                    String loginId = scanner.nextLine();
                    System.out.print("Enter Password: ");
                    String loginPassword = scanner.nextLine();
                    CustomerPojo loggedInCustomer = customerService.loginCustomer(loginId, loginPassword);
                    if (loggedInCustomer != null) {
                        System.out.println("Login successful. Welcome " + loggedInCustomer.getName() + "!");
                    } else {
                        System.out.println("Invalid ID or Password.");
                    }
                    break;

                case 3:
                    System.out.print("Enter Customer ID: ");
                    String usageId = scanner.nextLine();
                    System.out.print("Enter Month: ");
                    String usageMonth = scanner.nextLine();
                    System.out.print("Enter Usage in kWh: ");
                    int usageInKwh = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    customerService.addUsage(usageId, usageMonth, usageInKwh);
                    System.out.println("Usage recorded.");
                    break;

                case 4:
                    System.out.print("Enter Customer ID: ");
                    String billId = scanner.nextLine();
                    System.out.print("Enter Month: ");
                    String billMonth = scanner.nextLine();
                    System.out.print("Enter Unit Price: ");
                    double unitPrice = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    customerService.generateMonthlyBill(billId, billMonth, unitPrice);
                    System.out.println("Monthly bill generated.");
                    break;

                case 5:
                    System.out.print("Enter Customer ID: ");
                    String paymentId = scanner.nextLine();
                    System.out.print("Enter Month: ");
                    String paymentMonth = scanner.nextLine();
                    System.out.print("Enter Payment Amount: ");
                    double paymentAmount = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    customerService.makePayment(paymentId, paymentMonth, paymentAmount);
                    System.out.println("Payment recorded.");
                    break;

                case 6:
                    System.out.print("Enter Customer ID: ");
                    String editId = scanner.nextLine();
                    CustomerPojo customer = customerService.getCustomer(editId);
                    if (customer != null) {
                        System.out.println("Current details: " + customer);
                        System.out.print("Enter new Name (or press Enter to keep current): ");
                        String newName = scanner.nextLine();
                        if (!newName.isEmpty()) customer.setName(newName);
                        System.out.print("Enter new Address (or press Enter to keep current): ");
                        String newAddress = scanner.nextLine();
                        if (!newAddress.isEmpty()) customer.setAddress(newAddress);
                        customerService.editCustomer(customer);
                        System.out.println("Customer details updated.");
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 7:
                    System.out.print("Enter Customer ID: ");
                    String billHistoryId = scanner.nextLine();
                    CustomerPojo customerBillHistory = customerService.getCustomer(billHistoryId);
                    if (customerBillHistory != null) {
                        System.out.println("Bill History: " + customerBillHistory.getBillHistory());
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 8:
                    System.out.print("Enter Customer ID: ");
                    String paymentHistoryId = scanner.nextLine();
                    CustomerPojo customerPaymentHistory = customerService.getCustomer(paymentHistoryId);
                    if (customerPaymentHistory != null) {
                        System.out.println("Payment History: " + customerPaymentHistory.getPaymentHistory());
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 9:
                    System.out.print("Enter Month to Check Overdue Accounts: ");
                    String month = scanner.nextLine();
                    Collection<CustomerPojo> customers = customerService.getAllCustomers();
                    for (CustomerPojo cust : customers) {
                        double amountDue = cust.getTotalAmountDue(month);
                        if (amountDue > 0) {
                            System.out.println("Customer ID: " + cust.getCustomerId() + ", Amount Due: " + amountDue);
                        }
                    }
                    break;

                case 10:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }
}

package main;

import presentation.CustomerPresentation;

public class ElectricityBillingSystemMain {
    public static void main(String[] args) {
        CustomerPresentation presentation = new CustomerPresentation();
        presentation.execute();
    }
}
