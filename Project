package com.ebs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.ebs.model.CustomerPojo;

public class CustomerDaoJdbcImpl implements CustomerDao {

    @Override
    public List<CustomerPojo> fetchAllCustomers() {
        Connection conn = DBUtil.makeConnection();
        List<CustomerPojo> allCustomers = new ArrayList<>();
        String query = "SELECT * FROM EBS_Customer_Table";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                CustomerPojo customer = new CustomerPojo(
                    rs.getInt("Customer_Id"),
                    rs.getString("Customer_Name"),
                    rs.getString("Address_Id"),
                    rs.getString("Phone_Number"),
                    rs.getInt("Meter_Id"),
                    rs.getString("Email_Address")
                );
                allCustomers.add(customer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return allCustomers;
    }

    @Override
    public CustomerPojo fetchACustomer(int customerId) {
        Connection conn = DBUtil.makeConnection();
        String query = "SELECT * FROM EBS_Customer_Table WHERE Customer_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, customerId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new CustomerPojo(
                    rs.getInt("Customer_Id"),
                    rs.getString("Customer_Name"),
                    rs.getString("Address_Id"),
                    rs.getString("Phone_Number"),
                    rs.getInt("Meter_Id"),
                    rs.getString("Email_Address")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public CustomerPojo addCustomer(CustomerPojo newCustomer) {
        Connection conn = DBUtil.makeConnection();
        String query = "INSERT INTO EBS_Customer_Table (Customer_Name, Address_Id, Phone_Number, Meter_Id, Email_Address) VALUES (?, ?, ?, ?, ?)";
        try {
            PreparedStatement stmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setString(1, newCustomer.getCustomerName());
            stmt.setString(2, newCustomer.getAddressId());
            stmt.setString(3, newCustomer.getPhoneNumber());
            stmt.setInt(4, newCustomer.getMeterId());
            stmt.setString(5, newCustomer.getEmailAddress());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                newCustomer.setCustomerId(rs.getInt(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return newCustomer;
    }

    @Override
    public CustomerPojo updateCustomer(CustomerPojo updateCustomer) {
        Connection conn = DBUtil.makeConnection();
        String query = "UPDATE EBS_Customer_Table SET Customer_Name = ?, Address_Id = ?, Phone_Number = ?, Meter_Id = ?, Email_Address = ? WHERE Customer_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, updateCustomer.getCustomerName());
            stmt.setString(2, updateCustomer.getAddressId());
            stmt.setString(3, updateCustomer.getPhoneNumber());
            stmt.setInt(4, updateCustomer.getMeterId());
            stmt.setString(5, updateCustomer.getEmailAddress());
            stmt.setInt(6, updateCustomer.getCustomerId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return updateCustomer;
    }

    @Override
    public void deleteCustomer(int customerId) {
        Connection conn = DBUtil.makeConnection();
        String query = "DELETE FROM EBS_Customer_Table WHERE Customer_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, customerId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
package com.ebs.dao;

import java.util.List;
import com.ebs.model.MeterPojo;

public interface MeterDao {
    List<MeterPojo> fetchAllMeters();
    MeterPojo fetchAMeter(int meterId);
    MeterPojo addMeter(MeterPojo newMeter);
    MeterPojo updateMeter(MeterPojo updateMeter);
    void deleteMeter(int meterId);
}

package com.ebs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.ebs.model.MeterPojo;

public class MeterDaoJdbcImpl implements MeterDao {

    @Override
    public List<MeterPojo> fetchAllMeters() {
        Connection conn = DBUtil.makeConnection();
        List<MeterPojo> allMeters = new ArrayList<>();
        String query = "SELECT * FROM EBS_Meter_Table";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                MeterPojo meter = new MeterPojo(
                    rs.getInt("Meter_Id"),
                    rs.getString("Meter_Number"),
                    rs.getInt("Meter_Status_Id")
                );
                allMeters.add(meter);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return allMeters;
    }

    @Override
    public MeterPojo fetchAMeter(int meterId) {
        Connection conn = DBUtil.makeConnection();
        String query = "SELECT * FROM EBS_Meter_Table WHERE Meter_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, meterId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new MeterPojo(
                    rs.getInt("Meter_Id"),
                    rs.getString("Meter_Number"),
                    rs.getInt("Meter_Status_Id")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public MeterPojo addMeter(MeterPojo newMeter) {
        Connection conn = DBUtil.makeConnection();
        String query = "INSERT INTO EBS_Meter_Table (Meter_Number, Meter_Status_Id) VALUES (?, ?)";
        try {
            PreparedStatement stmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
            stmt.setString(1, newMeter.getMeterNumber());
            stmt.setInt(2, newMeter.getMeterStatusId());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                newMeter.setMeterId(rs.getInt(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return newMeter;
    }

    @Override
    public MeterPojo updateMeter(MeterPojo updateMeter) {
        Connection conn = DBUtil.makeConnection();
        String query = "UPDATE EBS_Meter_Table SET Meter_Number = ?, Meter_Status_Id = ? WHERE Meter_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(
            stmt.setString(1, updateMeter.getMeterNumber());
            stmt.setInt(2, updateMeter.getMeterStatusId());
            stmt.setInt(3, updateMeter.getMeterId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return updateMeter;
    }

    @Override
    public void deleteMeter(int meterId) {
        Connection conn = DBUtil.makeConnection();
        String query = "DELETE FROM EBS_Meter_Table WHERE Meter_Id = ?";
        try {
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, meterId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

package com.ebs.service;

import java.util.List;
import com.ebs.model.CustomerPojo;

public interface CustomerService {
    List<CustomerPojo> getAllCustomers();
    CustomerPojo getCustomer(int customerId);
    CustomerPojo createCustomer(CustomerPojo customer);
    CustomerPojo updateCustomer(CustomerPojo customer);
    void removeCustomer(int customerId);
}

package com.ebs.service;

import java.util.List;
import com.ebs.dao.CustomerDao;
import com.ebs.dao.CustomerDaoJdbcImpl;
import com.ebs.model.CustomerPojo;

public class CustomerServiceImpl implements CustomerService {

    CustomerDao customerDao;

    public CustomerServiceImpl() {
        this.customerDao = new CustomerDaoJdbcImpl();
    }

    @Override
    public List<CustomerPojo> getAllCustomers() {
        return customerDao.fetchAllCustomers();
    }

    @Override
    public CustomerPojo getCustomer(int customerId) {
        return customerDao.fetchACustomer(customerId);
    }

    @Override
    public CustomerPojo createCustomer(CustomerPojo customer) {
        return customerDao.addCustomer(customer);
    }

    @Override
    public CustomerPojo updateCustomer(CustomerPojo customer) {
        return customerDao.updateCustomer(customer);
    }

    @Override
    public void removeCustomer(int customerId) {
        customerDao.deleteCustomer(customerId);
    }
}

package com.ebs.service;

import java.util.List;
import com.ebs.model.MeterPojo;

public interface MeterService {
    List<MeterPojo> getAllMeters();
    MeterPojo getMeter(int meterId);
    MeterPojo createMeter(MeterPojo meter);
    MeterPojo updateMeter(MeterPojo meter);
    void removeMeter(int meterId);
}

package com.ebs.service;

import java.util.List;
import com.ebs.dao.MeterDao;
import com.ebs.dao.MeterDaoJdbcImpl;
import com.ebs.model.MeterPojo;

public class MeterServiceImpl implements MeterService {

    MeterDao meterDao;

    public MeterServiceImpl() {
        this.meterDao = new MeterDaoJdbcImpl();
    }

    @Override
    public List<MeterPojo> getAllMeters() {
        return meterDao.fetchAllMeters();
    }

    @Override
    public MeterPojo getMeter(int meterId) {
        return meterDao.fetchAMeter(meterId);
    }

    @Override
    public MeterPojo createMeter(MeterPojo meter) {
        return meterDao.addMeter(meter);
    }

    @Override
    public MeterPojo updateMeter(MeterPojo meter) {
        return meterDao.updateMeter(meter);
    }

    @Override
    public void removeMeter(int meterId) {
        meterDao.deleteMeter(meterId);
    }
}
package com.ebs.presentation;

import java.util.List;
import java.util.Scanner;
import com.ebs.model.CustomerPojo;
import com.ebs.model.MeterPojo;
import com.ebs.service.CustomerService;
import com.ebs.service.CustomerServiceImpl;
import com.ebs.service.MeterService;
import com.ebs.service.MeterServiceImpl;

public class Main {
    public static void main(String[] args) {
        CustomerService customerService = new CustomerServiceImpl();
        MeterService meterService = new MeterServiceImpl();

        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("\nElectricity Billing System Menu:");
            System.out.println("1. List all Customers");
            System.out.println("2. Add a Customer");
            System.out.println("3. Update a Customer");
            System.out.println("4. Delete a Customer");
            System.out.println("5. List all Meters");
            System.out.println("6. Add a Meter");
            System.out.println("7. Update a Meter");
            System.out.println("8. Delete a Meter");
            System.out.println("9. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    List<CustomerPojo> customers = customerService.getAllCustomers();
                    customers.forEach(customer -> System.out.println(customer.getCustomerId() + " - " + customer.getCustomerName()));
                    break;
                case 2:
                    System.out.print("Enter Customer Name: ");
                    String name = scanner.next();
                    System.out.print("Enter Address ID: ");
                    String address = scanner.next();
                    System.out.print("Enter Phone Number: ");
                    String phone = scanner.next();
                    System.out.print("Enter Meter ID: ");
                    int meter = scanner.nextInt();
                    System.out.print("Enter Email Address: ");
                    String email = scanner.next();
                    CustomerPojo newCustomer = new CustomerPojo(0, name, address, phone, meter, email);
                    customerService.createCustomer(newCustomer);
                    System.out.println("Customer added successfully!");
                    break;
                case 3:
                    System.out.print("Enter Customer ID to update: ");
                    int updateId = scanner.nextInt();
                    CustomerPojo customerToUpdate = customerService.getCustomer(updateId);
                    if (customerToUpdate != null) {
                        System.out.print("Enter new Customer Name: ");
                        customerToUpdate.setCustomerName(scanner.next());
                        System.out.print("Enter new Address ID: ");
                        customerToUpdate.setAddressId(scanner.next());
                        System.out.print("Enter new Phone Number: ");
                        customerToUpdate.setPhoneNumber(scanner.next());
                        System.out.print("Enter new Meter ID: ");
                        customerToUpdate.setMeterId(scanner.nextInt());
                        System.out.print("Enter new Email Address: ");
                        customerToUpdate.setEmailAddress(scanner.next());
                        customerService.updateCustomer(customerToUpdate);
                        System.out.println("Customer updated successfully!");
                    } else {
                        System.out.println("Customer not found!");
                    }
                    break;
                case 4:
                    System.out.print("Enter Customer ID to delete: ");
                    int deleteId = scanner.nextInt();
                    customerService.removeCustomer(deleteId);
                    System.out.println("Customer deleted successfully!");
                    break;
                case 5:
                    List<MeterPojo> meters = meterService.getAllMeters();
                    meters.forEach(meterPojo -> System.out.println(meterPojo.getMeterId() + " - " + meterPojo.getMeterNumber()));
                    break;
                case 6:
                    System.out.print("Enter Meter Number: ");
                    String meterNumber = scanner.next();
                    System.out.print("Enter Meter Status ID: ");
                    int statusId = scanner.nextInt();
                    MeterPojo newMeter = new MeterPojo(0, meterNumber, statusId);
                    meterService.createMeter(newMeter);
                    System.out.println("Meter added successfully!");
                    break;
                case 7:
                    System.out.print("Enter Meter ID to update: ");
                    int updateMeterId = scanner.nextInt();
                    MeterPojo meterToUpdate = meterService.getMeter(updateMeterId);
                    if (meterToUpdate != null) {
                        System.out.print("Enter new Meter Number: ");
                        meterToUpdate.setMeterNumber(scanner.next());
                        System.out.print("Enter new Meter Status ID: ");
                        meterToUpdate.setMeterStatusId(scanner.nextInt());
                        meterService.updateMeter(meterToUpdate);
                        System.out.println("Meter updated successfully!");
                    } else {
                        System.out.println("Meter not found!");
                    }
                    break;
                case 8:
                    System.out.print("Enter Meter ID to delete: ");
                    int deleteMeterId = scanner.nextInt();
                    meterService.removeMeter(deleteMeterId);
                    System.out.println("Meter deleted successfully!");
                    break;
                case 9:
                    running = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
        scanner.close();
        System.out.println("Thank you for using the Electricity Billing System!");
    }
}
package com.ebs.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtil {

    static Connection conn = null;

    static {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static Connection makeConnection() {
        String connectionUrl = "jdbc:oracle:thin:@your-db-url:1521:orcl"; // Replace with actual URL
        String userName = "your-db-username";
        String password = "your-db-password";
        try {
            if (conn == null) {
                conn = DriverManager.getConnection(connectionUrl, userName, password);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }

    public static void closeConnection() {
        try {
            if (conn != null) {
                conn.close();
           
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

package com.ebs.dao;

public class DBQueries {
    public static final String FETCH_ALL_CUSTOMERS = "SELECT * FROM EBS_Customer_Table";
    public static final String FETCH_A_CUSTOMER = "SELECT * FROM EBS_Customer_Table WHERE Customer_Id = ?";
    public static final String INSERT_CUSTOMER = "INSERT INTO EBS_Customer_Table (Customer_Name, Address_Id, Phone_Number, Meter_Id, Email_Address) VALUES (?, ?, ?, ?, ?)";
    public static final String UPDATE_CUSTOMER = "UPDATE EBS_Customer_Table SET Customer_Name = ?, Address_Id = ?, Phone_Number = ?, Meter_Id = ?, Email_Address = ? WHERE Customer_Id = ?";
    public static final String DELETE_CUSTOMER = "DELETE FROM EBS_Customer_Table WHERE Customer_Id = ?";
    
    public static final String FETCH_ALL_METERS = "SELECT * FROM EBS_Meter_Table";
    public static final String FETCH_A_METER = "SELECT * FROM EBS_Meter_Table WHERE Meter_Id = ?";
    public static final String INSERT_METER = "INSERT INTO EBS_Meter_Table (Meter_Number, Meter_Status_Id) VALUES (?, ?)";
    public static final String UPDATE_METER = "UPDATE EBS_Meter_Table SET Meter_Number = ?, Meter_Status_Id = ? WHERE Meter_Id = ?";
    public static final String DELETE_METER = "DELETE FROM EBS_Meter_Table WHERE Meter_Id = ?";
}

