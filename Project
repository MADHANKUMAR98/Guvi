package pojo;

import java.util.HashMap;
import java.util.Map;

public class CustomerPojo {
    private String customerId;
    private String name;
    private String address;
    private String meterNumber;
    private String password;
    private Map<String, Integer> usageRecords;
    private Map<String, Double> bills;

    public CustomerPojo(String customerId, String name, String address, String meterNumber, String password) {
        this.customerId = customerId;
        this.name = name;
        this.address = address;
        this.meterNumber = meterNumber;
        this.password = password;
        this.usageRecords = new HashMap<>();
        this.bills = new HashMap<>();
    }

    // Getters and setters
    public String getCustomerId() { return customerId; }
    public void setCustomerId(String customerId) { this.customerId = customerId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public String getMeterNumber() { return meterNumber; }
    public void setMeterNumber(String meterNumber) { this.meterNumber = meterNumber; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public Map<String, Integer> getUsageRecords() { return usageRecords; }
    public void addUsage(String month, int usage) { this.usageRecords.put(month, usage); }

    public Map<String, Double> getBills() { return bills; }
    public void addBill(String month, double billAmount) { this.bills.put(month, billAmount); }

    @Override
    public String toString() {
        return "CustomerPojo [customerId=" + customerId + ", name=" + name + ", address=" + address + ", meterNumber=" + meterNumber + "]";
    }
}
package dao;

import pojo.CustomerPojo;

public interface CustomerDao {
    CustomerPojo fetchCustomer(String customerId);
    CustomerPojo addCustomer(CustomerPojo customer);
    CustomerPojo updateCustomer(CustomerPojo customer);
    void deleteCustomer(String customerId);
}
package dao;

import pojo.CustomerPojo;

import java.util.HashMap;
import java.util.Map;

public class CustomerDaoCollectionImpl implements CustomerDao {
    private Map<String, CustomerPojo> customerDataStore = new HashMap<>();

    @Override
    public CustomerPojo fetchCustomer(String customerId) {
        return customerDataStore.get(customerId);
    }

    @Override
    public CustomerPojo addCustomer(CustomerPojo customer) {
        return customerDataStore.put(customer.getCustomerId(), customer);
    }

    @Override
    public CustomerPojo updateCustomer(CustomerPojo customer) {
        return customerDataStore.replace(customer.getCustomerId(), customer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerDataStore.remove(customerId);
    }
}
package service;

import pojo.CustomerPojo;

public interface CustomerService {
    CustomerPojo registerCustomer(CustomerPojo customer);
    CustomerPojo loginCustomer(String customerId, String password);
    void recordUsage(String customerId, String month, int usage);
    void generateMonthlyBill(String customerId, String month, int usage);
    CustomerPojo viewCustomer(String customerId);
    CustomerPojo editCustomer(CustomerPojo customer);
}
package service;

import dao.CustomerDao;
import dao.CustomerDaoCollectionImpl;
import pojo.CustomerPojo;

public class CustomerServiceImpl implements CustomerService {
    private CustomerDao customerDao;

    public CustomerServiceImpl() {
        this.customerDao = new CustomerDaoCollectionImpl();
    }

    @Override
    public CustomerPojo registerCustomer(CustomerPojo customer) {
        return customerDao.addCustomer(customer);
    }

    @Override
    public CustomerPojo loginCustomer(String customerId, String password) {
        CustomerPojo customer = customerDao.fetchCustomer(customerId);
        if (customer != null && customer.getPassword().equals(password)) {
            return customer;
        }
        return null;
    }

    @Override
    public void recordUsage(String customerId, String month, int usage) {
        CustomerPojo customer = customerDao.fetchCustomer(customerId);
        if (customer != null) {
            customer.addUsage(month, usage);
            customerDao.updateCustomer(customer);
        }
    }

    @Override
    public void generateMonthlyBill(String customerId, String month, int usage) {
        recordUsage(customerId, month, usage);
        double billAmount = usage * 0.15; // Example unit price
        CustomerPojo customer = customerDao.fetchCustomer(customerId);
        if (customer != null) {
            customer.addBill(month, billAmount);
            customerDao.updateCustomer(customer);
            System.out.println("Bill for " + month + " is: $" + billAmount);
        }
    }

    @Override
    public CustomerPojo viewCustomer(String customerId) {
        return customerDao.fetchCustomer(customerId);
    }

    @Override
    public CustomerPojo editCustomer(CustomerPojo customer) {
        return customerDao.updateCustomer(customer);
    }
}
package presentation;

import pojo.CustomerPojo;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Map;
import java.util.Scanner;

public class CustomerPresentation {
    private CustomerService customerService;

    public CustomerPresentation() {
        this.customerService = new CustomerServiceImpl();
    }

    public void execute() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Register");
            System.out.println("2. Login");
            System.out.println("3. Record Usage");
            System.out.println("4. Generate Bill");
            System.out.println("5. View Customer");
            System.out.println("6. Edit Customer");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1: // Register
                    System.out.print("Enter Customer ID: ");
                    String id = scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Address: ");
                    String address = scanner.nextLine();
                    System.out.print("Enter Meter Number: ");
                    String meterNumber = scanner.nextLine();
                    System.out.print("Enter Password: ");
                    String password = scanner.nextLine();
                    CustomerPojo newCustomer = new CustomerPojo(id, name, address, meterNumber, password);
                    customerService.registerCustomer(newCustomer);
                    System.out.println("Customer Registered.");
                    break;

                case 2: // Login
                    System.out.print("Enter Customer ID: ");
                    String loginId = scanner.nextLine();
                    System.out.print("Enter Password: ");
                    String loginPassword = scanner.nextLine();
                    CustomerPojo loggedInCustomer = customerService.loginCustomer(loginId, loginPassword);
                    if (loggedInCustomer != null) {
                        System.out.println("Login successful!");
                        // Proceed with other operations
                    } else {
                        System.out.println("Invalid ID or Password.");
                    }
                    break;

                case 3: // Record Usage
                    System.out.print("Enter Customer ID: ");
                    String recordUsageId = scanner.nextLine();
                    System.out.print("Enter Month: ");
                    String month = scanner.nextLine();
                    System.out.print("Enter Usage (in kWh): ");
                    int usage = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    customerService.recordUsage(recordUsageId, month, usage);
                    System.out.println("Usage recorded.");
                    break;

                case 4: // Generate Bill
                    System.out.print("Enter Customer ID: ");
                    String billId = scanner.nextLine();
                    System.out.print("Enter Month: ");
                    String billMonth = scanner.nextLine();
                    System.out.print("Enter Usage (in kWh): ");
                    int billUsage = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    customerService.generateMonthlyBill(billId, billMonth, billUsage);
                    break;

                case 5: // View Customer
                    System.out.print("Enter Customer ID: ");
                    String viewId = scanner.nextLine();
                    CustomerPojo customer = customerService.viewCustomer(viewId);
                    if (customer != null) {
                        System.out.println(customer);
                        System.out.println("Usage Records: " + customer.getUsageRecords());
                        System.out.println("Bills: " + customer.getBills());
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 6: // Edit Customer
                    System.out.print("Enter Customer ID: ");
                    String editId = scanner.nextLine();
                    CustomerPojo existingCustomer = customerService.viewCustomer(editId);
                    if (existingCustomer != null) {
                            // Continue editing customer information
                        System.out.print("Enter new Address: ");
                        String newAddress = scanner.nextLine();
                        existingCustomer.setAddress(newAddress);
                        System.out.print("Enter new Password: ");
                        String newPassword = scanner.nextLine();
                        existingCustomer.setPassword(newPassword);
                        customerService.editCustomer(existingCustomer);
                        System.out.println("Customer information updated.");
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 7: // Exit
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
import presentation.CustomerPresentation;

public class ElectricityBillingSystemMain {
    public static void main(String[] args) {
        CustomerPresentation presentation = new CustomerPresentation();
        presentation.execute();
    }
}
