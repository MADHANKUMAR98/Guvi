package pojo;

import java.util.HashMap;
import java.util.Map;

public class Customer {

    private String id;
    private String name;
    private String address;
    private String meterNumber;
    private String password;

    private Map<String, Integer> usage; // Stores monthly usage
    private Map<String, Double> bills; // Stores monthly bills
    private Map<String, PaymentDetails> payments; // New: Stores payment details

    // Constructor
    public Customer(String id, String name, String address, String meterNumber, String password) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.meterNumber = meterNumber;
        this.password = password;
        this.bills = new HashMap<>();
        this.usage = new HashMap<>();
        this.payments = new HashMap<>(); // Initialize payment details map
    }

    // Getters and Setters (include all attributes as necessary)

    // New method to add payment details
    public void addPayment(String month, String paymentId, String timestamp, boolean isPaid) {
        PaymentDetails paymentDetails = new PaymentDetails(paymentId, timestamp, isPaid);
        payments.put(month, paymentDetails);
    }

    // New method to check payment status
    public boolean isPaymentMade(String month) {
        PaymentDetails details = payments.get(month);
        return details != null && details.isPaid();
    }

    // Method to get payment history
    public Map<String, PaymentDetails> getPaymentHistory() {
        return payments;
    }
}

// New inner class to encapsulate payment details
class PaymentDetails {
    private String paymentId;
    private String timestamp;
    private boolean isPaid;

    public PaymentDetails(String paymentId, String timestamp, boolean isPaid) {
        this.paymentId = paymentId;
        this.timestamp = timestamp;
        this.isPaid = isPaid;
    }

    public String getPaymentId() {
        return paymentId;
    }

    public String getTimestamp() {
        return timestamp;
    }

    public boolean isPaid() {
        return isPaid;
    }

    // Optional: Override toString for easier display of payment details
    @Override
    public String toString() {
        return "Payment ID: " + paymentId + ", Timestamp: " + timestamp + ", Paid: " + (isPaid ? "Yes" : "No");
    }
}
public interface CustomerService {
    // Existing methods...
    void makePayment(String customerId, String month, double amount);
    Map<String, PaymentDetails> viewPaymentHistory(String customerId); // Updated to use PaymentDetails
    boolean checkPaymentStatus(String customerId, String month); // New method to check payment status
}
import java.util.Map;
import java.util.UUID;

public class CustomerServiceImpl implements CustomerService {
    private Map<String, Customer> customerMap;

    public CustomerServiceImpl() {
        this.customerMap = new HashMap<>();
    }

    // Existing methods...

    @Override
    public void makePayment(String customerId, String month, double amount) {
        Customer customer = customerMap.get(customerId);
        if (customer != null) {
            // Generate payment ID and timestamp
            String paymentId = UUID.randomUUID().toString().substring(0, 8);
            String timestamp = java.time.LocalDateTime.now().toString();

            // Store the payment details
            customer.addPayment(month, paymentId, timestamp, true); // 'true' indicates payment made
            System.out.println("Payment of $" + amount + " for " + month + " recorded with Payment ID: " + paymentId + " at " + timestamp);
        }
    }

    @Override
    public Map<String, PaymentDetails> viewPaymentHistory(String customerId) {
        Customer customer = customerMap.get(customerId);
        if (customer != null) {
            return customer.getPaymentHistory();
        } else {
            throw new IllegalArgumentException("Customer not found");
        }
    }

    @Override
    public boolean checkPaymentStatus(String customerId, String month) {
        Customer customer = customerMap.get(customerId);
        if (customer != null) {
            return customer.isPaymentMade(month);
        } else {
            throw new IllegalArgumentException("Customer not found");
        }
    }
}
private void adminMenu() {
    while (isAdminLoggedIn) {
        System.out.println("Admin Menu:");
        System.out.println("1. Add New Customer");
        System.out.println("2. View All Customers");
        System.out.println("3. Edit Customer");
        System.out.println("4. Delete Customer");
        System.out.println("5. View Pending Bills");
        System.out.println("6. Generate Bill for Customer");
        System.out.println("7. View Payment History"); // New option for viewing payment history
        System.out.println("8. Check Payment Status"); // New option for checking payment status
        System.out.println("9. Logout");
        System.out.print("Enter your choice: ");

        int choice;
        try {
            choice = scan.nextInt();
            scan.nextLine(); // Consume newline
        } catch (Exception e) {
            System.out.println("Invalid input. Please enter a number.");
            scan.nextLine(); // Consume invalid input
            continue;
        }

        switch (choice) {
            // Existing cases...
            case 7:
                viewPaymentHistoryForAdmin();
                break;
            case 8:
                checkPaymentStatusForAdmin();
                break;
            case 9:
                isAdminLoggedIn = false;
                System.out.println("Logged out successfully.");
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
        }
    }
}
private void viewPaymentHistoryForAdmin() {
    try {
        System.out.print("Enter customer ID to view payment history: ");
        String customerId = scan.nextLine();
        Map<String, PaymentDetails> paymentHistory = customerService.viewPaymentHistory(customerId);

        System.out.println("Payment History for Customer ID: " + customerId);
        for (Map.Entry<String, PaymentDetails> entry : paymentHistory.entrySet()) {
            System.out.println("Month: " + entry.getKey() + ", " + entry.getValue());
        }
    } catch (Exception e) {
        System.out.println("Error occurred while fetching payment history: " + e.getMessage());
    }
}

private void checkPaymentStatusForAdmin() {
    try {
        System.out.print("Enter customer ID: ");
        String customerId = scan.nextLine();
        System.out.print("Enter month to check payment status: ");
        String month = scan.nextLine();
        boolean isPaid = customerService.checkPaymentStatus(customerId, month);
        System.out.println("Payment status for " + month + ": " + (isPaid ? "Paid" : "Not Paid"));
    } catch (Exception e) {
        System.out.println("Error occurred while checking payment status: " + e.getMessage());
    }
}
