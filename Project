```java
        return ResponseEntity.ok(customer);
    }

    @PostMapping("/makePayment")
    public ResponseEntity<Payment> makePayment(@RequestBody Payment payment) {
        Payment newPayment = customerService.makePayment(payment);
        return ResponseEntity.ok(newPayment);
    }

    @GetMapping("/paymentHistory/{customerId}")
    public ResponseEntity<List<Payment>> viewPaymentHistory(@PathVariable String customerId) {
        List<Payment> paymentHistory = customerService.viewPaymentHistory(customerId);
        return ResponseEntity.ok(paymentHistory);
    }
}
```

---

### **Sample Functionality and Input**

1. **Admin Login Flow:**
   - Admin enters username and password.
   - If valid, admin is authenticated, and the admin can now:
     - Add, edit, or delete customers.
     - Generate bills for a customer by providing the customer's ID and the amount of electricity used.
     - View a customer's payment history or pending payments.

**Sample Input:**
```json
{
  "username": "admin1",
  "password": "adminpass"
}
```

2. **Adding a Customer:**
   - Admin inputs customer details (name, email, phone, address).
   - The new customer is registered in the system.

**Sample Input:**
```json
{
  "customerId": "CUST001",
  "name": "John Doe",
  "email": "johndoe@example.com",
  "phone": "1234567890",
  "password": "password123",
  "address": "1234 Elm Street"
}
```

3. **Customer Login Flow:**
   - Customer enters email and password.
   - Once authenticated, they can:
     - Make payments.
     - View previous payments and electricity consumption history.

**Sample Input:**
```json
{
  "email": "johndoe@example.com",
  "password": "password123"
}
```

4. **Generating a Bill for a Customer:**
   - Admin enters the month, electricity used, and the customer's ID.
   - The system calculates the bill based on predefined rates.

**Sample Input:**
```json
{
  "billId": "BILL001",
  "billMonth": "August",
  "electricityUsed": 350,
  "amount": 700.00,
  "status": "Pending",
  "customerId": "CUST001"
}
```

5. **Making a Payment:**
   - The customer selects a pending bill and pays the amount due.
   - The system captures the payment details and updates the bill's status to "Paid."

**Sample Input:**
```json
{
  "paymentId": "PAY001",
  "amountPaid": 700.00,
  "paymentMode": "Credit Card",
  "billId": "BILL001"
}
```

6. **Viewing Payment History:**
   - Customer requests their payment history.
   - The system returns all payments made by the customer.

**Sample Input:**
```
GET /customer/paymentHistory/CUST001
```

---

### **Relational Mapping in Database**

- **One-to-Many** between `Customer` and `Bill`: Each customer can have multiple bills.
- **Many-to-One** between `Bill` and `Payment`: Each payment corresponds to one bill.

These mappings are represented in the entities using `@ManyToOne` and `@OneToMany` annotations.

---

### **Project Summary**

This Spring Boot project handles both admin and customer flows with a well-structured architecture:
- **Admin Flow:** Managing customers, generating bills, and viewing payments.
- **Customer Flow:** Making payments and viewing their electricity consumption history.
- The system uses Oracle as the database and integrates various entities and relationships to make the system professional and scalable.

Let me know if you need further customization or explanation!
