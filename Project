import java.util.List;
import java.util.Scanner;

public class Main {

    private static final Scanner scanner = new Scanner(System.in);
    private static final StudentService studentService = new StudentServiceImpl();
    private static final CompanyService companyService = new CompanyServiceImpl();
    private static final ApplicationService applicationService = new ApplicationServiceImpl();
    private static final InterviewService interviewService = new InterviewServiceImpl();
    private static final PlacementService placementService = new PlacementServiceImpl();

    public static void main(String[] args) {
        while (true) {
            System.out.println("College Placement Management System");
            System.out.println("1. Add Student");
            System.out.println("2. Add Company");
            System.out.println("3. Add Application");
            System.out.println("4. Schedule Interview");
            System.out.println("5. Add Placement");
            System.out.println("6. View All Students");
            System.out.println("7. View All Companies");
            System.out.println("8. View All Applications");
            System.out.println("9. View All Interviews");
            System.out.println("10. View All Placements");
            System.out.println("11. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    addCompany();
                    break;
                case 3:
                    addApplication();
                    break;
                case 4:
                    scheduleInterview();
                    break;
                case 5:
                    addPlacement();
                    break;
                case 6:
                    viewAllStudents();
                    break;
                case 7:
                    viewAllCompanies();
                    break;
                case 8:
                    viewAllApplications();
                    break;
                case 9:
                    viewAllInterviews();
                    break;
                case 10:
                    viewAllPlacements();
                    break;
                case 11:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void addStudent() {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter name: ");
        String name = scanner.nextLine();
        System.out.print("Enter email: ");
        String email = scanner.nextLine();
        System.out.print("Enter phone: ");
        String phone = scanner.nextLine();
        System.out.print("Enter course: ");
        String course = scanner.nextLine();
        System.out.print("Enter GPA: ");
        double gpa = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        try {
            studentService.addStudent(new Student(studentId, name, email, phone, course, gpa));
            System.out.println("Student added successfully.");
        } catch (Exception e) {
            System.out.println("Error adding student: " + e.getMessage());
        }
    }

    private static void addCompany() {
        System.out.print("Enter company ID: ");
        String companyId = scanner.nextLine();
        System.out.print("Enter name: ");
        String name = scanner.nextLine();
        System.out.print("Enter location: ");
        String location = scanner.nextLine();
        System.out.print("Enter industry: ");
        String industry = scanner.nextLine();

        try {
            companyService.addCompany(new Company(companyId, name, location, industry));
            System.out.println("Company added successfully.");
        } catch (Exception e) {
            System.out.println("Error adding company: " + e.getMessage());
        }
    }

    private static void addApplication() {
        System.out.print("Enter application ID: ");
        String applicationId = scanner.nextLine();
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter company ID: ");
        String companyId = scanner.nextLine();
        System.out.print("Enter status: ");
        String status = scanner.nextLine();

        try {
            applicationService.addApplication(new Application(applicationId, studentId, companyId, status));
            System.out.println("Application added successfully.");
        } catch (Exception e) {
            System.out.println("Error adding application: " + e.getMessage());
        }
    }

    private static void scheduleInterview() {
        System.out.print("Enter interview ID: ");
        String interviewId = scanner.nextLine();
        System.out.print("Enter application ID: ");
        String applicationId = scanner.nextLine();
        System.out.print("Enter interview date (YYYY-MM-DD): ");
        String date = scanner.nextLine();
        System.out.print("Enter status: ");
        String status = scanner.nextLine();

        try {
            interviewService.addInterview(new Interview(interviewId, applicationId, Date.valueOf(date), status));
            System.out.println("Interview scheduled successfully.");
        } catch (Exception e) {
            System.out.println("Error scheduling interview: " + e.getMessage());
        }
    }

    private static void addPlacement() {
        System.out.print("Enter placement ID: ");
        String placementId = scanner.nextLine();
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter company ID: ");
        String companyId = scanner.nextLine();
        System.out.print("Enter job role: ");
        String jobRole = scanner.nextLine();
        System.out.print("Enter package amount: ");
        double packageAmount = scanner.nextDouble();
        System.out.print("Enter placement date (YYYY-MM-DD): ");
        String date = scanner.nextLine();
        scanner.nextLine(); // Consume newline

        try {
            placementService.addPlacement(new Placement(placementId, studentId, companyId, jobRole, packageAmount, Date.valueOf(date)));
            System.out.println("Placement added successfully.");
        } catch (Exception e) {
            System.out.println("Error adding placement: " + e.getMessage());
        }
    }

    private static void viewAllStudents() {
        try {
            List<Student> students = studentService.getAllStudents();
            for (Student student : students) {
                System.out.println(student);
            }
        } catch (Exception e) {
            System.out.println("Error retrieving students: " + e.getMessage());
        }
    }

    private static void viewAllCompanies() {
        try {
            List<Company> companies = companyService.getAllCompanies();
            for (Company company : companies) {
                System.out.println(company);
            }
        } catch (Exception e) {
            System.out.println("Error retrieving companies: " + e.getMessage());
        }
    }

    private static void viewAllApplications() {
        try {
            List<Application> applications = applicationService.getAllApplications();
            for (Application application : applications) {
                System.out.println(application);
            }
        } catch (Exception e) {
            System.out.println("Error retrieving applications: " + e.getMessage());
        }
    }

    private static void viewAllInterviews() {
        try {
            List<Interview> interviews = interviewService.getAllInterviews();
            for (Interview interview : interviews) {
                System.out.println(interview);
            }
        } catch (Exception e) {
            System.out.println("Error retrieving interviews: " + e.getMessage());
        }
    }

    private static void viewAllPlacements() {
        try {
            List<Placement> placements = placementService.getAllPlacements();
            for (Placement placement : placements) {
                System.out.println(placement);
            }
        } catch (Exception e) {
            System.out.println("Error retrieving placements: " + e.getMessage());
        }
    }
}

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAOImpl implements StudentDAO {

    private static final String JDBC_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String JDBC_USER = "your_username";
    private static final String JDBC_PASSWORD = "your_password";

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
    }

    @Override
    public void addStudent(Student student) throws Exception {
        String sql = "INSERT INTO Students (student_id, name, email, phone, course, gpa) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, student.getStudentId());
            preparedStatement.setString(2, student.getName());
            preparedStatement.setString(3, student.getEmail());
            preparedStatement.setString(4, student.getPhone());
            preparedStatement.setString(5, student.getCourse());
            preparedStatement.setDouble(6, student.getGpa());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error adding student: " + e.getMessage(), e);
        }
    }

    @Override
    public void updateStudent(Student student) throws Exception {
        String sql = "UPDATE Students SET name = ?, email = ?, phone = ?, course = ?, gpa = ? WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, student.getName());
            preparedStatement.setString(2, student.getEmail());
            preparedStatement.setString(3, student.getPhone());
            preparedStatement.setString(4, student.getCourse());
            preparedStatement.setDouble(5, student.getGpa());
            preparedStatement.setString(6, student.getStudentId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error updating student: " + e.getMessage(), e);
        }
    }

    @Override
    public void deleteStudent(String studentId) throws Exception {
        String sql = "DELETE FROM Students WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, studentId);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error deleting student: " + e.getMessage(), e);
        }
    }

    @Override
    public Student getStudentById(String studentId) throws Exception {
        String sql = "SELECT * FROM Students WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, studentId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    return new Student(
                        resultSet.getString("student_id"),
                        resultSet.getString("name"),
                        resultSet.getString("email"),
                        resultSet.getString("phone"),
                        resultSet.getString("course"),
                        resultSet.getDouble("gpa")
                    );
                } else {
                    throw new Exception("Student with ID " + studentId + " not found.");
                }
            }
        } catch (SQLException e) {
            throw new Exception("Error retrieving student: " + e.getMessage(), e);
        }
    }

    @Override
    public List<Student> getAllStudents() throws Exception {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Students";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                students.add(new Student(
                    resultSet.getString("student_id"),
                    resultSet.getString("name"),
                    resultSet.getString("email"),
                    resultSet.getString("phone"),
                    resultSet.getString("course"),
                    resultSet.getDouble("gpa")
                ));
            }
        } catch (SQLException e) {
            throw new Exception("Error retrieving all students: " + e.getMessage(), e);
        }
        return students;
    }
}

import java.util.List;

public interface StudentService {
    void addStudent(Student student) throws Exception;
    Student getStudentById(String studentId) throws Exception;
    List<Student> getAllStudents() throws Exception;
    void updateStudent(Student student) throws Exception;
    void deleteStudent(String studentId) throws Exception;
}
import java.util.List;

public class StudentServiceImpl implements StudentService {

    private StudentDAO studentDAO = new StudentDAOImpl();

    @Override
    public void addStudent(Student student) throws Exception {
        try {
            studentDAO.addStudent(student);
        } catch (Exception e) {
            throw new Exception("Error adding student: " + e.getMessage(), e);
        }
    }

    @Override
    public Student getStudentById(String studentId) throws Exception {
        try {
            return studentDAO.getStudentById(studentId);
        } catch (Exception e) {
            throw new Exception("Error retrieving student: " + e.getMessage(), e);
        }
    }

    @Override
    public List<Student> getAllStudents() throws Exception {
        try {
            return studentDAO.getAllStudents();
        } catch (Exception e) {
            throw new Exception("Error retrieving all students: " + e.getMessage(), e);
        }
    }

    @Override
    public void updateStudent(Student student) throws Exception {
        try {
            studentDAO.updateStudent(student);
        } catch (Exception e) {
            throw new Exception("Error updating student: " + e.getMessage(), e);
        }
    }

    @Override
    public void deleteStudent(String studentId) throws Exception {
        try {
            studentDAO.deleteStudent(studentId);
        } catch (Exception e) {
            throw new Exception("Error deleting student: " + e.getMessage(), e);
        }
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAOImpl implements StudentDAO {

    private static final String JDBC_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String JDBC_USER = "your_username";
    private static final String JDBC_PASSWORD = "your_password";

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
    }

    @Override
    public void addStudent(Student student) throws Exception {
        String sql = "INSERT INTO Students (student_id, name, email, phone, course, gpa) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, student.getStudentId());
            preparedStatement.setString(2, student.getName());
            preparedStatement.setString(3, student.getEmail());
            preparedStatement.setString(4, student.getPhone());
            preparedStatement.setString(5, student.getCourse());
            preparedStatement.setDouble(6, student.getGpa());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error adding student: " + e.getMessage(), e);
        }
    }

    @Override
    public void updateStudent(Student student) throws Exception {
        String sql = "UPDATE Students SET name = ?, email = ?, phone = ?, course = ?, gpa = ? WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, student.getName());
            preparedStatement.setString(2, student.getEmail());
            preparedStatement.setString(3, student.getPhone());
            preparedStatement.setString(4, student.getCourse());
            preparedStatement.setDouble(5, student.getGpa());
            preparedStatement.setString(6, student.getStudentId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error updating student: " + e.getMessage(), e);
        }
    }

    @Override
    public void deleteStudent(String studentId) throws Exception {
        String sql = "DELETE FROM Students WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, studentId);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new Exception("Error deleting student: " + e.getMessage(), e);
        }
    }

    @Override
    public Student getStudentById(String studentId) throws Exception {
        String sql = "SELECT * FROM Students WHERE student_id = ?";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, studentId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    return new Student(
                        resultSet.getString("student_id"),
                        resultSet.getString("name"),
                        resultSet.getString("email"),
                        resultSet.getString("phone"),
                        resultSet.getString("course"),
                        resultSet.getDouble("gpa")
                    );
                } else {
                    throw new Exception("Student with ID " + studentId + " not found.");
                }
            }
        } catch (SQLException e) {
            throw new Exception("Error retrieving student: " + e.getMessage(), e);
        }
    }

    @Override
    public List<Student> getAllStudents() throws Exception {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Students";
        try (Connection connection = getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                students.add(new Student(
                    resultSet.getString("student_id"),
                    resultSet.getString("name"),
                    resultSet.getString("email"),
                    resultSet.getString("phone"),
                    resultSet.getString("course"),
                    resultSet.getDouble("gpa")
                ));
            }
        } catch (SQLException e) {
            throw new Exception("Error retrieving all students: " + e.getMessage(), e);
        }
        return students;
    }
}
import java.util.List;

public interface StudentDAO {
    void addStudent(Student student) throws Exception;
    void updateStudent(Student student) throws Exception;
    void deleteStudent(String studentId) throws Exception;
    Student getStudentById(String studentId) throws Exception;
    List<Student> getAllStudents() throws Exception;
}
