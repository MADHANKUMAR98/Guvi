package presentation;

import pojo.Customer;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Collection;
import java.util.Scanner;

public class Presentation {
    private CustomerService customerService;

    public Presentation() {
        customerService = new CustomerServiceImpl();
    }

    public void present() {
        Scanner scan = new Scanner(System.in);
        boolean isLoggedIn = false;
        boolean isAdmin = false;

        while (true) {
            if (!isLoggedIn) {
                // Initial screen: Choose between Admin and Customer registration/login
                System.out.println("1. Register as Admin");
                System.out.println("2. Login as Admin");
                System.out.println("3. Register as Customer");
                System.out.println("4. Login as Customer");
                System.out.println("5. Exit");
                System.out.print("Enter your option: ");
                int option = scan.nextInt();
                scan.nextLine(); // consume newline

                switch (option) {
                    case 1:
                        registerAdmin(scan);
                        break;
                    case 2:
                        isLoggedIn = loginAdmin(scan);
                        isAdmin = isLoggedIn;
                        break;
                    case 3:
                        registerCustomer(scan);
                        break;
                    case 4:
                        isLoggedIn = loginCustomer(scan);
                        isAdmin = false;
                        break;
                    case 5:
                        scan.close();
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid option. Please try again.");
                        break;
                }
            } else {
                if (isAdmin) {
                    showAdminMenu(scan);
                } else {
                    showCustomerMenu(scan);
                }
                // After the admin or customer logs out, reset the login status
                isLoggedIn = false;
                isAdmin = false;
            }
        }
    }

    private void registerAdmin(Scanner scan) {
        System.out.print("Enter Admin name: ");
        String name = scan.nextLine();
        System.out.print("Enter Admin address: ");
        String address = scan.nextLine();
        System.out.print("Enter Admin password: ");
        String password = scan.nextLine();
        String id = generateShortUUID();
        Customer newAdmin = new Customer(id, name, address, "N/A", password);
        customerService.addCustomer(newAdmin);
        System.out.println("Admin registered with ID: " + id);
    }

    private boolean loginAdmin(Scanner scan) {
        System.out.print("Enter Admin ID: ");
        String loginId = scan.nextLine();
        System.out.print("Enter password: ");
        String loginPassword = scan.nextLine();
        Customer admin = customerService.fetchCustomer(loginId);
        if (admin != null && admin.getPassword().equals(loginPassword)) {
            System.out.println("Admin login successful.");
            return true;
        } else {
            System.out.println("Invalid Admin credentials.");
            return false;
        }
    }

    private void registerCustomer(Scanner scan) {
        System.out.print("Enter Customer name: ");
        String name = scan.nextLine();
        System.out.print("Enter Customer address: ");
        String address = scan.nextLine();
        System.out.print("Enter meter number: ");
        String meterNumber = scan.nextLine();
        System.out.print("Enter password: ");
        String password = scan.nextLine();
        String id = generateShortUUID();
        Customer newCustomer = new Customer(id, name, address, meterNumber, password);
        customerService.addCustomer(newCustomer);
        System.out.println("Customer registered with ID: " + id);
    }

    private boolean loginCustomer(Scanner scan) {
        System.out.print("Enter Customer ID: ");
        String loginId = scan.nextLine();
        System.out.print("Enter password: ");
        String loginPassword = scan.nextLine();
        Customer customer = customerService.fetchCustomer(loginId);
        if (customer != null && customer.getPassword().equals(loginPassword)) {
            System.out.println("Customer login successful.");
            return true;
        } else {
            System.out.println("Invalid Customer credentials.");
            return false;
        }
    }

    private void showAdminMenu(Scanner scan) {
        while (true) {
            System.out.println("Admin Menu:");
            System.out.println("1. View All Customers");
            System.out.println("2. View/Edit Customer Information");
            System.out.println("3. View Overdue Accounts");
            System.out.println("4. Logout");
            System.out.print("Enter your option: ");
            int adminOption = scan.nextInt();
            scan.nextLine(); // consume newline

            switch (adminOption) {
                case 1:
                    Collection<Customer> allCustomers = customerService.fetchAllCustomers();
                    allCustomers.forEach(System.out::println);
                    break;
                case 2:
                    System.out.print("Enter Customer ID to edit: ");
                    String editId = scan.nextLine();
                    Customer customerToEdit = customerService.fetchCustomer(editId);
                    if (customerToEdit != null) {
                        editCustomerDetails(scan, customerToEdit);
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 3:
                    System.out.println("Overdue Accounts:");
                    customerService.fetchAllCustomers().forEach(customer -> {
                        if (customer.hasOverdueBills()) {
                            System.out.println("Customer ID: " + customer.getId() + ", Name: " + customer.getName());
                        }
                    });
                    break;
                case 4:
                    System.out.println("Logging out...");
                    return; // Return to the initial screen
                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }

    private void showCustomerMenu(Scanner scan) {
        while (true) {
            System.out.println("Customer Menu:");
            System.out.println("1. View/Edit Customer Information");
            System.out.println("2. Record Electricity Usage");
            System.out.println("3. Generate Monthly Bill");
            System.out.println("4. View Bill History");
            System.out.println("5. Make a Payment");
            System.out.println("6. View Payment History");
            System.out.println("7. Logout");
            System.out.print("Enter your option: ");
            int customerOption = scan.nextInt();
            scan.nextLine(); // consume newline

            switch (customerOption) {
                case 1:
                    System.out.print("Enter Customer ID to edit: ");
                    String editId = scan.nextLine();
                    Customer customerToEdit = customerService.fetchCustomer(editId);
                    if (customerToEdit != null) {
                        editCustomerDetails(scan, customerToEdit);
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 2:
                    // Implement logic to record electricity usage
                    break;
                case 3:
                    // Implement logic to generate a monthly bill
                    break;
                case 4:
                    // Implement logic to view bill history
                    break;
                case 5:
                    // Implement logic to make a payment
                    break;
                case 6:
                    // Implement logic to view payment history
                    break;
                case 7:
                    System.out.println("Logging out...");
                    return; // Return to the initial screen
                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }

    private void editCustomerDetails(Scanner scan, Customer customerToEdit) {
        System.out.println("Editing Customer Information:");
        System.out.println("Current name: " + customerToEdit.getName());
        System.out.print("Enter new name (or leave blank): ");
        String newName = scan.nextLine();
        if (!newName.isEmpty()) {
            customerToEdit.setName(newName);
        }

        System.out.println("Current address: " + customerToEdit.getAddress());
        System.out.print("Enter new address (or leave blank): ");
        String newAddress = scan.nextLine();
        if (!newAddress.isEmpty()) {
            customerToEdit.setAddress(newAddress);
        }

        System.out.println("Current meter number: " + customerToEdit.getMeterNumber());
        System.out.print("Enter new meter number (or leave blank): ");
        String newMeterNumber = scan.nextLine();
        if (!newMeterNumber.isEmpty()) {
            customerToEdit.setMeterNumber(newMeterNumber);
        }

        System.out.println("Current password: " + customerToEdit.getPassword());
        System.out.print("Enter new password (or leave blank): ");
        String newPassword = scan.nextLine();
        if (!newPassword.isEmpty()) {
            customerToEdit.setPassword(newPassword);
        }

        customerService.updateCustomer(customerToEdit);
        System.out.println("Customer information updated.");
    }

    private String generateShortUUID() {
        return java.util.UUID.randomUUID().toString().substring(0, 8);
    }
}
