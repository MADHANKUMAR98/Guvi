Hereâ€™s an expanded Spring Boot project structure for your electricity billing system with proper layering (POJO, Controller, Service, and DAO) and database integration with Oracle. Each functionality is based on user roles: **Admin** and **Customer**, with separate login flows.

### 1. **Database Schema** (Oracle)

```sql
-- Customers Table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID VARCHAR2(20) PRIMARY KEY,
    NAME VARCHAR2(100),
    EMAIL VARCHAR2(100),
    PHONE VARCHAR2(15),
    PASSWORD VARCHAR2(100),
    ADDRESS VARCHAR2(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bills Table
CREATE TABLE BILLS (
    BILL_ID VARCHAR2(20) PRIMARY KEY,
    BILL_MONTH VARCHAR2(20),
    ELECTRICITY_USED NUMBER,
    AMOUNT NUMBER(10, 2),
    STATUS VARCHAR2(20),
    CUSTOMER_ID VARCHAR2(20),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- Payments Table
CREATE TABLE PAYMENTS (
    PAYMENT_ID VARCHAR2(20) PRIMARY KEY,
    PAYMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    AMOUNT_PAID NUMBER(10, 2),
    PAYMENT_MODE VARCHAR2(20),
    BILL_ID VARCHAR2(20),
    FOREIGN KEY (BILL_ID) REFERENCES BILLS(BILL_ID)
);

-- Admins Table
CREATE TABLE ADMINS (
    ADMIN_ID VARCHAR2(20) PRIMARY KEY,
    USERNAME VARCHAR2(100),
    PASSWORD VARCHAR2(100)
);
```

---

### 2. **Entities (POJO Layer)**

#### 2.1. `Customer.java`
```java
@Entity
@Table(name = "CUSTOMERS")
public class Customer {
    @Id
    private String customerId;
    
    private String name;
    private String email;
    private String phone;
    private String password;
    private String address;

    @CreationTimestamp
    private LocalDateTime createdAt;

    // Getters and Setters
}
```

#### 2.2. `Admin.java`
```java
@Entity
@Table(name = "ADMINS")
public class Admin {
    @Id
    private String adminId;
    
    private String username;
    private String password;

    // Getters and Setters
}
```

#### 2.3. `Bill.java`
```java
@Entity
@Table(name = "BILLS")
public class Bill {
    @Id
    private String billId;
    
    private String billMonth;
    private double electricityUsed;
    private double amount;
    private String status;

    @ManyToOne
    @JoinColumn(name = "CUSTOMER_ID")
    private Customer customer;

    // Getters and Setters
}
```

#### 2.4. `Payment.java`
```java
@Entity
@Table(name = "PAYMENTS")
public class Payment {
    @Id
    private String paymentId;
    
    private double amountPaid;
    private String paymentMode;

    @CreationTimestamp
    private LocalDateTime paymentDate;

    @ManyToOne
    @JoinColumn(name = "BILL_ID")
    private Bill bill;

    // Getters and Setters
}
```

---

### 3. **DAO Layer (Repositories)**

#### 3.1. `CustomerRepository.java`
```java
@Repository
public interface CustomerRepository extends JpaRepository<Customer, String> {
    Optional<Customer> findByEmailAndPassword(String email, String password);
}
```

#### 3.2. `AdminRepository.java`
```java
@Repository
public interface AdminRepository extends JpaRepository<Admin, String> {
    Optional<Admin> findByUsernameAndPassword(String username, String password);
}
```

#### 3.3. `BillRepository.java`
```java
@Repository
public interface BillRepository extends JpaRepository<Bill, String> {
    List<Bill> findByCustomerAndStatus(Customer customer, String status);
}
```

#### 3.4. `PaymentRepository.java`
```java
@Repository
public interface PaymentRepository extends JpaRepository<Payment, String> {
    List<Payment> findByBill(Bill bill);
}
```

---

### 4. **Service Layer**

#### 4.1. `AdminService.java`
```java
@Service
public interface AdminService {
    Admin login(String username, String password);
    void addCustomer(Customer customer);
    void editCustomer(Customer customer);
    void deleteCustomer(String customerId);
    Bill generateBill(Bill bill);
    List<Payment> viewCustomerPayments(String customerId);
    List<Bill> viewPendingPayments(String customerId);
}
```

#### 4.2. `AdminServiceImpl.java`
```java
@Service
public class AdminServiceImpl implements AdminService {

    @Autowired
    private AdminRepository adminRepo;

    @Autowired
    private CustomerRepository customerRepo;

    @Autowired
    private BillRepository billRepo;

    @Autowired
    private PaymentRepository paymentRepo;

    @Override
    public Admin login(String username, String password) {
        return adminRepo.findByUsernameAndPassword(username, password)
                .orElseThrow(() -> new RuntimeException("Invalid admin credentials"));
    }

    @Override
    public void addCustomer(Customer customer) {
        customerRepo.save(customer);
    }

    @Override
    public void editCustomer(Customer customer) {
        customerRepo.save(customer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerRepo.deleteById(customerId);
    }

    @Override
    public Bill generateBill(Bill bill) {
        return billRepo.save(bill);
    }

    @Override
    public List<Payment> viewCustomerPayments(String customerId) {
        Customer customer = customerRepo.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        return paymentRepo.findByBillCustomer(customer);
    }

    @Override
    public List<Bill> viewPendingPayments(String customerId) {
        Customer customer = customerRepo.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        return billRepo.findByCustomerAndStatus(customer, "Pending");
    }
}
```

#### 4.3. `CustomerService.java`
```java
@Service
public interface CustomerService {
    Customer login(String email, String password);
    Payment makePayment(Payment payment);
    List<Payment> viewPaymentHistory(String customerId);
}
```

#### 4.4. `CustomerServiceImpl.java`
```java
@Service
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerRepository customerRepo;

    @Autowired
    private BillRepository billRepo;

    @Autowired
    private PaymentRepository paymentRepo;

    @Override
    public Customer login(String email, String password) {
        return customerRepo.findByEmailAndPassword(email, password)
                .orElseThrow(() -> new RuntimeException("Invalid customer credentials"));
    }

    @Override
    public Payment makePayment(Payment payment) {
        Bill bill = billRepo.findById(payment.getBill().getBillId())
                .orElseThrow(() -> new RuntimeException("Bill not found"));
        payment.setBill(bill);
        paymentRepo.save(payment);
        bill.setStatus("Paid");
        billRepo.save(bill);
        return payment;
    }

    @Override
    public List<Payment> viewPaymentHistory(String customerId) {
        Customer customer = customerRepo.findById(customerId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
        return paymentRepo.findByBillCustomer(customer);
    }
}
```

---

### 5. **Controllers Layer**

#### 5.1. `AdminController.java`
```java
@RestController
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private AdminService adminService;

    @PostMapping("/login")
    public ResponseEntity<Admin> login(@RequestBody Map<String, String> credentials) {
        Admin admin = adminService.login(credentials.get("username"), credentials.get("password"));
        return ResponseEntity.ok(admin);
    }

    @PostMapping("/addCustomer")
    public ResponseEntity<Customer> addCustomer(@RequestBody Customer customer) {
        adminService.addCustomer(customer);
        return ResponseEntity.ok(customer);
    }

    @PutMapping("/editCustomer")
    public ResponseEntity<Customer> editCustomer(@RequestBody Customer customer) {
        adminService.editCustomer(customer);
        return ResponseEntity.ok(customer);
    }

    @DeleteMapping("/deleteCustomer/{customerId}")
    public ResponseEntity<String> deleteCustomer(@PathVariable String customerId) {
        adminService.deleteCustomer(customerId);
        return ResponseEntity.ok("Customer deleted");
    }

    @PostMapping("/generateBill")
    public ResponseEntity<Bill> generateBill(@RequestBody Bill bill) {
        Bill generatedBill = adminService.generateBill(bill);
        return ResponseEntity.ok(generatedBill);
    }

    @GetMapping("/viewPayments/{customerId}")
    public ResponseEntity<List<Payment>> viewPayments(@PathVariable String customerId) {
        List<Payment> payments = adminService.viewCustomerPayments(customerId);
        return ResponseEntity.ok(payments);
    }

    @GetMapping("/viewPendingPayments/{customerId}")
    public ResponseEntity<List<Bill>> viewPendingPayments(@PathVariable String customerId) {
        List<Bill> pendingBills = adminService.viewPendingPayments(customerId);
        return ResponseEntity.ok(pendingBills);
    }
}
```

#### 5.2. `CustomerController.java`
```java
@RestController
@RequestMapping("/customer")
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @PostMapping("/login")
    public ResponseEntity<Customer> login(@RequestBody Map<String, String> credentials) {
        Customer customer = customerService.login(credentials.get("email"), credentials.get("password"));

```java
        return ResponseEntity.ok(customer);
    }

    @PostMapping("/makePayment")
    public ResponseEntity<Payment> makePayment(@RequestBody Payment payment) {
        Payment newPayment = customerService.makePayment(payment);
        return ResponseEntity.ok(newPayment);
    }

    @GetMapping("/paymentHistory/{customerId}")
    public ResponseEntity<List<Payment>> viewPaymentHistory(@PathVariable String customerId) {
        List<Payment> paymentHistory = customerService.viewPaymentHistory(customerId);
        return ResponseEntity.ok(paymentHistory);
    }
}
```

---

### **Sample Functionality and Input**

1. **Admin Login Flow:**
   - Admin enters username and password.
   - If valid, admin is authenticated, and the admin can now:
     - Add, edit, or delete customers.
     - Generate bills for a customer by providing the customer's ID and the amount of electricity used.
     - View a customer's payment history or pending payments.

**Sample Input:**
```json
{
  "username": "admin1",
  "password": "adminpass"
}
```

2. **Adding a Customer:**
   - Admin inputs customer details (name, email, phone, address).
   - The new customer is registered in the system.

**Sample Input:**
```json
{
  "customerId": "CUST001",
  "name": "John Doe",
  "email": "johndoe@example.com",
  "phone": "1234567890",
  "password": "password123",
  "address": "1234 Elm Street"
}
```

3. **Customer Login Flow:**
   - Customer enters email and password.
   - Once authenticated, they can:
     - Make payments.
     - View previous payments and electricity consumption history.

**Sample Input:**
```json
{
  "email": "johndoe@example.com",
  "password": "password123"
}
```

4. **Generating a Bill for a Customer:**
   - Admin enters the month, electricity used, and the customer's ID.
   - The system calculates the bill based on predefined rates.

**Sample Input:**
```json
{
  "billId": "BILL001",
  "billMonth": "August",
  "electricityUsed": 350,
  "amount": 700.00,
  "status": "Pending",
  "customerId": "CUST001"
}
```

5. **Making a Payment:**
   - The customer selects a pending bill and pays the amount due.
   - The system captures the payment details and updates the bill's status to "Paid."

**Sample Input:**
```json
{
  "paymentId": "PAY001",
  "amountPaid": 700.00,
  "paymentMode": "Credit Card",
  "billId": "BILL001"
}
```

6. **Viewing Payment History:**
   - Customer requests their payment history.
   - The system returns all payments made by the customer.

**Sample Input:**
```
GET /customer/paymentHistory/CUST001
```

---

### **Relational Mapping in Database**

- **One-to-Many** between `Customer` and `Bill`: Each customer can have multiple bills.
- **Many-to-One** between `Bill` and `Payment`: Each payment corresponds to one bill.

These mappings are represented in the entities using `@ManyToOne` and `@OneToMany` annotations.

---

### **Project Summary**

This Spring Boot project handles both admin and customer flows with a well-structured architecture:
- **Admin Flow:** Managing customers, generating bills, and viewing payments.
- **Customer Flow:** Making payments and viewing their electricity consumption history.
- The system uses Oracle as the database and integrates various entities and relationships to make the system professional and scalable.

Let me know if you need further customization or explanation!
