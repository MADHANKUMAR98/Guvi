package pojo;

import java.util.HashMap;
import java.util.Map;

public class Customer {
    private String id;
    private String name;
    private String address;
    private String meterNumber;
    private String password;
    private Map<String, Double> bills;
    private Map<String, Double> payments;
    private Map<String, Integer> usage;

    public Customer(String id, String name, String address, String meterNumber, String password) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.meterNumber = meterNumber;
        this.password = password;
        this.bills = new HashMap<>();
        this.payments = new HashMap<>();
        this.usage = new HashMap<>();
    }

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }
    public String getMeterNumber() { return meterNumber; }
    public void setMeterNumber(String meterNumber) { this.meterNumber = meterNumber; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    public Map<String, Double> getBills() { return bills; }
    public void setBills(Map<String, Double> bills) { this.bills = bills; }
    public Map<String, Double> getPayments() { return payments; }
    public void setPayments(Map<String, Double> payments) { this.payments = payments; }
    public Map<String, Integer> getUsage() { return usage; }
    public void setUsage(Map<String, Integer> usage) { this.usage = usage; }

    public void addUsage(String month, int kwh) {
        usage.put(month, kwh);
    }

    public int getUsage(String month) {
        return usage.getOrDefault(month, 0);
    }

    public void addBill(String month, double amount) {
        bills.put(month, amount);
    }

    public double getBill(String month) {
        return bills.getOrDefault(month, 0.0);
    }

    public void addPayment(String month, double amount) {
        payments.put(month, amount);
    }

    public double getPayment(String month) {
        return payments.getOrDefault(month, 0.0);
    }

    public double getOutstandingAmount(String month) {
        return getBill(month) - getPayment(month);
    }

    public boolean hasOverdueBills() {
        return bills.entrySet().stream().anyMatch(entry -> getOutstandingAmount(entry.getKey()) > 0);
    }

    @Override
    public String toString() {
        return "Customer [id=" + id + ", name=" + name + ", address=" + address + ", meterNumber=" + meterNumber
                + ", password=" + password + ", bills=" + bills + ", payments=" + payments + ", usage=" + usage + "]";
    }
}
package dao;

import pojo.Customer;
import java.util.Collection;

public interface CustomerDAO {
    Collection<Customer> fetchAllCustomers();
    Customer fetchCustomer(String customerId);
    Customer addCustomer(Customer newCustomer);
    Customer updateCustomer(Customer updatedCustomer);
    void deleteCustomer(String customerId);
}
package dao;

import pojo.Customer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

public class CustomerDAOCollectionImpl implements CustomerDAO {
    private Map<String, Customer> customerDataStore;

    public CustomerDAOCollectionImpl() {
        customerDataStore = new HashMap<>();
        // Initialize with some default data if necessary
    }

    @Override
    public Collection<Customer> fetchAllCustomers() {
        return customerDataStore.values();
    }

    @Override
    public Customer fetchCustomer(String customerId) {
        return customerDataStore.get(customerId);
    }

    @Override
    public Customer addCustomer(Customer newCustomer) {
        customerDataStore.put(newCustomer.getId(), newCustomer);
        return newCustomer;
    }

    @Override
    public Customer updateCustomer(Customer updatedCustomer) {
        return customerDataStore.replace(updatedCustomer.getId(), updatedCustomer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerDataStore.remove(customerId);
    }
}
package service;

import pojo.Customer;
import java.util.Collection;

public interface CustomerService {
    Collection<Customer> fetchAllCustomers();
    Customer fetchCustomer(String customerId);
    Customer addCustomer(Customer newCustomer);
    Customer updateCustomer(Customer updatedCustomer);
    void deleteCustomer(String customerId);
}
package service;

import dao.CustomerDAO;
import dao.CustomerDAOCollectionImpl;
import pojo.Customer;
import java.util.Collection;

public class CustomerServiceImpl implements CustomerService {
    private CustomerDAO customerDAO;

    public CustomerServiceImpl() {
        customerDAO = new CustomerDAOCollectionImpl();
    }

    @Override
    public Collection<Customer> fetchAllCustomers() {
        return customerDAO.fetchAllCustomers();
    }

    @Override
    public Customer fetchCustomer(String customerId) {
        return customerDAO.fetchCustomer(customerId);
    }

    @Override
    public Customer addCustomer(Customer newCustomer) {
        return customerDAO.addCustomer(newCustomer);
    }

    @Override
    public Customer updateCustomer(Customer updatedCustomer) {
        return customerDAO.updateCustomer(updatedCustomer);
    }

    @Override
    public void deleteCustomer(String customerId) {
        customerDAO.deleteCustomer(customerId);
    }
}
package presentation;

import pojo.Customer;
import service.CustomerService;
import service.CustomerServiceImpl;

import java.util.Collection;
import java.util.Scanner;

public class Presentation {
    private CustomerService customerService;

    public Presentation() {
        customerService = new CustomerServiceImpl();
    }

    public void present() {
        Scanner scan = new Scanner(System.in);
        while (true) {
            System.out.println("1. Register");
            System.out.println("2. Login");
            System.out.println("3. Add Customer Details");
            System.out.println("4. View/Edit Customer Information");
            System.out.println("5. Record Electricity Usage");
            System.out.println("6. Generate Monthly Bill");
            System.out.println("7. View Bill History");
            System.out.println("8. Make a Payment");
            System.out.println("9. View Payment History");
            System.out.println("10. Admin - View Overdue Accounts");
            System.out.println("11. Exit");
            System.out.print("Enter your option: ");
            int option = scan.nextInt();
            scan.nextLine(); // consume newline

            switch (option) {
                case 1: // User Registration
                    System.out.print("Enter name: ");
                    String name = scan.nextLine();
                    System.out.print("Enter address: ");
                    String address = scan.nextLine();
                    System.out.print("Enter meter number: ");
                    String meterNumber = scan.nextLine();
                    System.out.print("Enter password: ");
                    String password = scan.nextLine();
                    String id = /* Generate unique ID */;
                    Customer newCustomer = new Customer(id, name, address, meterNumber, password);
                    customerService.addCustomer(newCustomer);
                    System.out.println("Customer registered with ID: " + id);
                    break;
                case 2: // Customer Login
                    System.out.print("Enter customer ID: ");
                    String loginId = scan.nextLine();
                    System.out.print("Enter password: ");
                    String loginPassword = scan.nextLine();
                    Customer customer = customerService.fetchCustomer(loginId);
                    if (customer != null && customer.getPassword().equals(loginPassword)) {
                        System.out.println("Login successful.");
                        // Show customer options or navigate to the next screen
                    } else {
                        System.out.println("Invalid credentials.");
                    }
                    break;
                case 3: // Add Customer Details
                    System.out.print("Enter name: ");
                    String adminName = scan.nextLine();
                    System.out.print("Enter address: ");
                    String adminAddress = scan.nextLine();
                    System.out.print("Enter meter number: ");
                    String adminMeterNumber = scan.nextLine();
                    System.out.print("Enter password: ");
                    String adminPassword = scan.nextLine();
                    String adminId = /* Generate unique ID */;
                    Customer adminCustomer = new Customer(adminId, adminName, adminAddress, adminMeterNumber, adminPassword);
                    customerService.addCustomer(adminCustomer);
                    System.out.println("Customer added with ID: " + adminId);
                    break;
                case 4: // View/Edit Customer Information
                    System.out.print("Enter customer ID: ");
                    String editId = scan.nextLine();
                    Customer customerToEdit = customerService.fetchCustomer(editId);
                    if (customerToEdit != null) {
                        System.out.println("Current Information: " + customerToEdit);
                        System.out.print("Enter new name (or leave blank): ");
                        String newName = scan.nextLine();
                        if (!newName.isEmpty()) {
                            customerToEdit.setName(newName);
                        }
                        // Do the same for other fields
                        customerService.updateCustomer(customerToEdit);
                        System.out.println("Customer information updated.");
                        break;
                case 5: // Record Electricity Usage
                    System.out.print("Enter customer ID: ");
                    String usageId = scan.nextLine();
                    Customer usageCustomer = customerService.fetchCustomer(usageId);
                    if (usageCustomer != null) {
                        System.out.print("Enter month (e.g., '2024-08'): ");
                        String month = scan.nextLine();
                        System.out.print("Enter electricity usage (in kWh): ");
                        int usageInKwh = scan.nextInt();
                        scan.nextLine(); // consume newline
                        usageCustomer.addUsage(month, usageInKwh);
                        customerService.updateCustomer(usageCustomer);
                        System.out.println("Electricity usage recorded.");
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 6: // Generate Monthly Bill
                    System.out.print("Enter customer ID: ");
                    String billId = scan.nextLine();
                    Customer billCustomer = customerService.fetchCustomer(billId);
                    if (billCustomer != null) {
                        System.out.print("Enter month (e.g., '2024-08'): ");
                        String billMonth = scan.nextLine();
                        double unitPrice = 0.12; // Example unit price
                        int usage = billCustomer.getUsage(billMonth);
                        double billAmount = usage * unitPrice;
                        billCustomer.addBill(billMonth, billAmount);
                        customerService.updateCustomer(billCustomer);
                        System.out.println("Monthly bill generated: $" + billAmount);
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 7: // View Bill History
                    System.out.print("Enter customer ID: ");
                    String historyId = scan.nextLine();
                    Customer historyCustomer = customerService.fetchCustomer(historyId);
                    if (historyCustomer != null) {
                        System.out.println("Bill History:");
                        historyCustomer.getBills().forEach((month, amount) -> System.out.println("Month: " + month + " - Amount: $" + amount));
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 8: // Make a Payment
                    System.out.print("Enter customer ID: ");
                    String paymentId = scan.nextLine();
                    Customer paymentCustomer = customerService.fetchCustomer(paymentId);
                    if (paymentCustomer != null) {
                        System.out.print("Enter month to pay for (e.g., '2024-08'): ");
                        String paymentMonth = scan.nextLine();
                        System.out.print("Enter payment amount: ");
                        double paymentAmount = scan.nextDouble();
                        scan.nextLine(); // consume newline
                        paymentCustomer.addPayment(paymentMonth, paymentAmount);
                        customerService.updateCustomer(paymentCustomer);
                        System.out.println("Payment recorded.");
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 9: // View Payment History
                    System.out.print("Enter customer ID: ");
                    String paymentHistoryId = scan.nextLine();
                    Customer paymentHistoryCustomer = customerService.fetchCustomer(paymentHistoryId);
                    if (paymentHistoryCustomer != null) {
                        System.out.println("Payment History:");
                        paymentHistoryCustomer.getPayments().forEach((month, amount) -> System.out.println("Month: " + month + " - Amount: $" + amount));
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;
                case 10: // Admin - View Overdue Accounts
                    System.out.println("Overdue Accounts:");
                    customerService.fetchAllCustomers().forEach(customer -> {
                        if (customer.hasOverdueBills()) {
                            System.out.println("Customer ID: " + customer.getId() + ", Outstanding Amount: $" + customer.getOutstandingAmount("2024-08"));
                        }
                    });
                    break;
                case 11: // Exit
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}

import presentation.Presentation;

public class BillingSystemMain {
    public static void main(String[] args) {
        Presentation presentation = new Presentation();
        presentation.present();
    }
}
